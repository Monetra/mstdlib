.TH "m_io_jni" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_io_jni
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "M_bool \fBM_io_jni_init\fP (JavaVM *Jvm)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_android_init\fP (jobject connectivity_manager)"
.br
.ti -1c
.RI "JNIEnv * \fBM_io_jni_getenv\fP (void)"
.br
.ti -1c
.RI "void \fBM_io_jni_debug\fP (const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "jclass \fBM_io_jni_find_class\fP (JNIEnv *env, const char *path)"
.br
.ti -1c
.RI "\fBM_hash_dict_t\fP * \fBM_io_jni_jhashmap_to_mhashdict\fP (JNIEnv *env, jobject map)"
.br
.ti -1c
.RI "jobject \fBM_io_jni_mhashdict_to_jhashmap\fP (JNIEnv *env, \fBM_hash_dict_t\fP *dict)"
.br
.ti -1c
.RI "void \fBM_io_jni_deletelocalref\fP (JNIEnv *env, jobject *ref)"
.br
.ti -1c
.RI "jobject \fBM_io_jni_create_globalref\fP (JNIEnv *env, jobject ref)"
.br
.ti -1c
.RI "void \fBM_io_jni_delete_globalref\fP (JNIEnv *env, jobject *ref)"
.br
.ti -1c
.RI "size_t \fBM_io_jni_array_length\fP (JNIEnv *env, jobject arr)"
.br
.ti -1c
.RI "jobject \fBM_io_jni_array_element\fP (JNIEnv *env, jobject arr, size_t idx)"
.br
.ti -1c
.RI "char * \fBM_io_jni_jstring_to_pchar\fP (JNIEnv *env, jstring str)"
.br
.ti -1c
.RI "jstring \fBM_io_jni_pchar_to_jstring\fP (JNIEnv *env, const char *str)"
.br
.ti -1c
.RI "unsigned char * \fBM_io_jni_jbyteArray_to_puchar\fP (JNIEnv *env, jbyteArray in, size_t *size_out)"
.br
.ti -1c
.RI "jbyteArray \fBM_io_jni_puchar_to_jbyteArray\fP (JNIEnv *env, const unsigned char *data, size_t data_size)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_new_object\fP (jobject *rv, char *error, size_t error_len, JNIEnv *env, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jvoid\fP (char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jobject\fP (jobject *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jbyte\fP (jbyte *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jboolean\fP (jboolean *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jchar\fP (jchar *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jint\fP (jint *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jlong\fP (jlong *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jfloat\fP (jfloat *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jdouble\fP (jdouble *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jobjectArray\fP (jobjectArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jbyteArray\fP (jbyteArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jbooleanArray\fP (jbooleanArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jcharArray\fP (jcharArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jintArray\fP (jintArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jlongArray\fP (jlongArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jfloatArray\fP (jfloatArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.ti -1c
.RI "M_bool \fBM_io_jni_call_jdoubleArray\fP (jdoubleArray *rv, char *error, size_t error_len, JNIEnv *env, jobject classobj, const char *method, size_t argc,\&.\&.\&.)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Included using the semi-public header of <\fBmstdlib/io/m_io_jni\&.h\fP> This is not included by default because it is considered a stable API\&.
.PP
Java JNI Helper Functions\&. Primarily used for Android integration where Bluetooth support requires it\&. However, nothing here is Android specific and will never be\&. This is purely JNI and does not use anything outside of what's provided by Java itself\&. 
.SH "Function Documentation"
.PP 
.SS "M_bool M_io_jni_init (JavaVM * Jvm)"
Initialization function to initialize the Java JNI environment\&.
.PP
This routine must be called once at startup before any of the M_io_jni helper functions can be used\&.
.PP
This implementation only supports a single Java VM instance, globally\&.
.PP
\fBParameters:\fP
.RS 4
\fIJvm\fP Initialized JavaVM to use\&. Must be specified\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, M_FALSE on failure\&. 
.RE
.PP

.SS "M_bool M_io_jni_android_init (jobject connectivity_manager)"
Initialization function to initialize the io system for use on Android\&.
.PP
M_io_jni_init must be called before this function\&. This should only be called when building for Android\&.
.PP
This function must be called before DNS resolution will work on Android 8 (Oreo) or newer when built targeting SDK 26\&. Also, the ACCESS_NETWORK_STATE permission must be present in the Android application\&.
.PP
\fBParameters:\fP
.RS 4
\fIconnectivity_manager\fP Android connectivity manager\&. Can be accessed in Java from a Context like so: (ConnectivityManager)context\&.getSystemService(Context\&.CONNECTIVITY_SERVICE);
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, M_FALSE on failure\&. 
.RE
.PP

.SS "JNIEnv* M_io_jni_getenv (void)"
Retrieve JNI Environment Handle for current thread\&.
.PP
If thread is not currently assigned a handle, a new one will be created, otherwise the existing handle will be returned\&.
.PP
\fBReturns:\fP
.RS 4
JNI Environment Handle or NULL on error 
.RE
.PP

.SS "void M_io_jni_debug (const char * fmt,  \&.\&.\&.)"
Output debug text relevant to JNI execution\&.
.PP
If not using a debug build, this is a no-op, and no information will be output\&. This is mostly used internally by the implementation, but people wishing to implement additional JNI methods might find this useful for debug purposes\&.
.PP
On Android, this uses the android logging functions, on other systems this simply outputs the message to stderr\&.
.PP
\fBParameters:\fP
.RS 4
\fIfmt\fP Standard printf-style format string\&. A new line will be automatically added to the output\&. 
.br
\fI\&.\&.\&.\fP Arguments as referenced in the format string 
.RE
.PP

.SS "jclass M_io_jni_find_class (JNIEnv * env, const char * path)"
Look up a class based on its path\&.
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIpath\fP The path for the class, such as java/util/HashMap 
.RE
.PP
\fBReturns:\fP
.RS 4
global class reference or NULL on failure\&. 
.RE
.PP

.SS "\fBM_hash_dict_t\fP* M_io_jni_jhashmap_to_mhashdict (JNIEnv * env, jobject map)"
Convert a Java HashMap into an M_hash_dict_t *\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fImap\fP Java Hash Map object to convert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Intialized M_hash_dict_t filled in with the map parameters or NULL on error\&. 
.RE
.PP

.SS "jobject M_io_jni_mhashdict_to_jhashmap (JNIEnv * env, \fBM_hash_dict_t\fP * dict)"
Convert an M_hash_dict_t * into a Java HashMap object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIdict\fP M_hash_dict_t to convert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
HashMap Object or NULL on error\&. The returned object should be released with \fBM_io_jni_deletelocalref()\fP when no longer needed\&. 
.RE
.PP

.SS "void M_io_jni_deletelocalref (JNIEnv * env, jobject * ref)"
Delete reference to object so garbage collector can destroy it\&.
.PP
This isn't absolutely necessary to call, but is recommended for long-running routines, or if using many objects in a loop so you don't run out of descriptors\&. When control returns from JNI back to Java, any used JNI objects not manually deleted will be released if they were not returned into java scope\&. Once an object is deleted it can no longer be used, nor can it be returned to Java\&.
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIref\fP Object reference to be deleted, passed by reference\&. Will be set pointer will be set to NULL when dereferenced to ensure it won't be used again\&. 
.RE
.PP

.SS "jobject M_io_jni_create_globalref (JNIEnv * env, jobject ref)"
Create a global JNI reference to prevent garbage collection of a Java object that may need to persist past the point where execution is returned to Java\&.
.PP
If a Java object is held within a C object that needs to persist, and integrator must mark it as a global reference, then delete the global reference when no longer needed, otherwise the object will be cleaned up by Java\&.
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIref\fP Java object to create a global reference to\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Java object with global reference\&. Must be cleaned up with \fBM_io_jni_create_globalref()\fP or will cause a resource leak\&. 
.RE
.PP

.SS "void M_io_jni_delete_globalref (JNIEnv * env, jobject * ref)"
Delete the global JNI reference created with \fBM_io_jni_create_globalref()\fP
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIref\fP Object reference to be deleted, passed by reference\&. Will be set pointer will be set to NULL when dereferenced to ensure it won't be used again\&. 
.RE
.PP

.SS "size_t M_io_jni_array_length (JNIEnv * env, jobject arr)"
Retrieve length of Array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIarr\fP Array object to get count\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
length of array 
.RE
.PP

.SS "jobject M_io_jni_array_element (JNIEnv * env, jobject arr, size_t idx)"
Retrieve an element from an Array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIarr\fP Array to retrieve element from\&. 
.br
\fIidx\fP Array index\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Object retrieved from array or NULL on error\&. The returned object should be released using \fBM_io_jni_deletelocalref()\fP when no longer needed\&. 
.RE
.PP

.SS "char* M_io_jni_jstring_to_pchar (JNIEnv * env, jstring str)"
Convert jstring into C String (allocated, null terminated)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIstr\fP jstring to convert into C String 
.RE
.PP
\fBReturns:\fP
.RS 4
Allocated C String, must be freed with \fBM_free()\fP\&. NULL on error\&. 
.RE
.PP

.SS "jstring M_io_jni_pchar_to_jstring (JNIEnv * env, const char * str)"
Convert a C String into a jstring 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIstr\fP C String to convert into a jstring\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
jstring object or NULL on error\&. The returned object should be released using \fBM_io_jni_deletelocalref()\fP when no longer needed\&. 
.RE
.PP

.SS "unsigned char* M_io_jni_jbyteArray_to_puchar (JNIEnv * env, jbyteArray in, size_t * size_out)"
Convert a byte array into an unsigned character pointer 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIin\fP Byte array to convert to unsigned character data\&. 
.br
\fIsize_out\fP Size of returned buffer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
unsigned character buffer, must be freed with \fBM_free()\fP\&. NULL on error\&. 
.RE
.PP

.SS "jbyteArray M_io_jni_puchar_to_jbyteArray (JNIEnv * env, const unsigned char * data, size_t data_size)"
Convert an unsigned character buffer into a jbyteArray 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIdata\fP Unsigned character data\&. 
.br
\fIdata_size\fP Size of character data buffer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
jbyteArray object or NULL on error\&. The returned object should be released using \fBM_io_jni_deletelocalref()\fP when no longer needed\&. 
.RE
.PP

.SS "M_bool M_io_jni_new_object (jobject * rv, char * error, size_t error_len, JNIEnv * env, const char * method, size_t argc,  \&.\&.\&.)"
Create a new object using the specified method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrv\fP Returned object, passed by reference\&. Returned object should be released using \fBM_io_jni_deletelocalref()\fP when no longer needed\&. 
.br
\fIerror\fP Optional\&. Buffer to hold error message\&. 
.br
\fIerror_len\fP Error buffer size\&. 
.br
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fImethod\fP The class initializer method\&. The method specified should be in the form of 'path/to/class\&.<init>', and must have been one of the classes in the global initialization\&. 
.br
\fIargc\fP Count of arguments to follow\&. 
.br
\fI\&.\&.\&.\fP Variable argument list depending on method being called\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if the method was called successfully, M_FALSE if there was a usage error or exception\&. A value of M_TRUE doesn't mean the returned object was populated, the call may have resulted in an error that didn't raise an exception\&. 
.RE
.PP

.SS "M_bool M_io_jni_call_jvoid (char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns jvoid (no result)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP Optional\&. Buffer to hold error message\&. 
.br
\fIerror_len\fP Error buffer size\&. 
.br
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIclassobj\fP Class object to call method on\&. If the method being called is static, this parameter will be ignored, so should be passed as NULL\&. 
.br
\fImethod\fP The method to be called\&. The method should be in the form of 'path/to/class\&.method', and must have been one of the methods in the global initialization\&. 
.br
\fIargc\fP Count of argument to follow\&. 
.br
\fI\&.\&.\&.\fP Variable argument list depending on method being called\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if the method was called successfully, M_FALSE if there was a usage error or exception\&. 
.RE
.PP

.SS "M_bool M_io_jni_call_jobject (jobject * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns jobject\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrv\fP Returned object, passed by reference\&. Returned object should be released using \fBM_io_jni_deletelocalref()\fP when no longer needed\&. 
.br
\fIerror\fP Optional\&. Buffer to hold error message\&. 
.br
\fIerror_len\fP Error buffer size\&. 
.br
\fIenv\fP Optional\&. Java JNI Environment\&. If not passed will request it from the JVM\&. Passing it is an optimization\&. 
.br
\fIclassobj\fP Class object to call method on\&. If the method being called is static, this parameter will be ignored, so should be passed as NULL\&. 
.br
\fImethod\fP The method to be called\&. The method should be in the form of 'path/to/class\&.method', and must have been one of the methods in the global initialization\&. 
.br
\fIargc\fP Count of arguments to follow\&. 
.br
\fI\&.\&.\&.\fP Variable argument list depending on method being called\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if the method was called successfully, M_FALSE if there was a usage error or exception\&. A value of M_TRUE doesn't mean the returned object was populated, the call may have resulted in an error that didn't raise an exception\&. 
.RE
.PP

.SS "M_bool M_io_jni_call_jbyte (jbyte * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jbyte\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jboolean (jboolean * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jboolean\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jchar (jchar * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jchar\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jint (jint * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jint\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jlong (jlong * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jlong\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jfloat (jfloat * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jfloat\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jdouble (jdouble * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jdouble\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jobjectArray (jobjectArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jobjectArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jbyteArray (jbyteArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jbyteArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jbooleanArray (jbooleanArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jbooleanArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jcharArray (jcharArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jcharArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jintArray (jintArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jintArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jlongArray (jlongArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jlongArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jfloatArray (jfloatArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jfloatArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SS "M_bool M_io_jni_call_jdoubleArray (jdoubleArray * rv, char * error, size_t error_len, JNIEnv * env, jobject classobj, const char * method, size_t argc,  \&.\&.\&.)"
Call an object method that returns a jdoubleArray\&.
.PP
See \fBM_io_jni_call_jobject()\fP for usage information\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
