.TH "m_time_time" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_time_time
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBM_time_t\fP \fBM_time\fP (void)"
.br
.ti -1c
.RI "M_bool \fBM_time_gettimeofday\fP (\fBM_timeval_t\fP *tv)"
.br
.ti -1c
.RI "int \fBM_time_days_in_month\fP (M_int64 year, M_int64 month)"
.br
.ti -1c
.RI "M_bool \fBM_time_is_valid_day\fP (M_int64 year, M_int64 month, M_int64 day)"
.br
.ti -1c
.RI "void \fBM_time_normalize_tm\fP (struct \fBM_time_tm\fP *tm)"
.br
.ti -1c
.RI "\fBM_time_t\fP \fBM_time_fromlocal\fP (M_time_localtm_t *ltime, const \fBM_time_tz_t\fP *tz)"
.br
.ti -1c
.RI "void \fBM_time_tolocal\fP (\fBM_time_t\fP t, M_time_localtm_t *ltime, const \fBM_time_tz_t\fP *tz)"
.br
.ti -1c
.RI "void \fBM_time_togm\fP (\fBM_time_t\fP t, M_time_gmtm_t *tm)"
.br
.ti -1c
.RI "\fBM_time_t\fP \fBM_time_fromgm\fP (M_time_gmtm_t *tm)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "\fBM_time_t\fP M_time (void)"
Get the system time\&.
.PP
While M_time_t is guaranteed to be 64 bit the time returned is not\&. Time is dependent on the platform and some only support 32 bit time values\&. On these systems M_time will only return a value up to Jan 19, 2038 03:14:07 UTC\&.
.PP
\fBReturns:\fP
.RS 4
Number of seconds since Epoch (Jan 1, 1970 00:00:00 UTC)\&. 
.RE
.PP

.SS "M_bool M_time_gettimeofday (\fBM_timeval_t\fP * tv)"
Get the number of seconds and milliseconds since Epoch\&.
.PP
\fBParameters:\fP
.RS 4
\fItv\fP The time as seconds and milliseconds since Epoch\&.
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, otherwise M_FALSE\&. 
.RE
.PP

.SS "int M_time_days_in_month (M_int64 year, M_int64 month)"
Get the number of days in a given month for a given year\&.
.PP
Accounts for leap years\&.
.PP
\fBParameters:\fP
.RS 4
\fIyear\fP The year\&. 
.br
\fImonth\fP The month\&. 1-12\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The number of days in the month\&. 
.RE
.PP

.SS "M_bool M_time_is_valid_day (M_int64 year, M_int64 month, M_int64 day)"
Determine if a give day of month valid for the given month for a given year\&.
.PP
\fBParameters:\fP
.RS 4
\fIyear\fP The year\&. 
.br
\fImonth\fP The month\&. 
.br
\fIday\fP The day of month\&.
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if the day is valid\&. Otherwise M_FALSE\&. 
.RE
.PP

.SS "void M_time_normalize_tm (struct \fBM_time_tm\fP * tm)"
Normalize a struct tm\&.
.PP
If adjustments are made to a struct tm this will bring the adjustments back to a real date/time\&.
.PP
This does not modify the isdst, gmtoff or abbr fields of the struct\&. These may be wrong if the adjust time crosses a DST boundary for example\&. Use M_time_fromlocal with the appropriate time zone data (or NULL if using the systems current info) to normalize a time taking into account these fields\&. Or use M_time_fromgm if dealing with a gm time (isdst, gmtoff and abbr will be cleared)\&.
.PP
\fBParameters:\fP
.RS 4
\fItm\fP The tm to normalize\&. 
.RE
.PP

.SS "\fBM_time_t\fP M_time_fromlocal (M_time_localtm_t * ltime, const \fBM_time_tz_t\fP * tz)"
Convert a local time to a UTC time\&.
.PP
\fBParameters:\fP
.RS 4
\fIltime\fP The local time structure to convert\&. This will be normalized\&. 
.br
\fItz\fP The time zone the local time is in\&.
.RE
.PP
\fBReturns:\fP
.RS 4
UTC time\&. 
.RE
.PP

.SS "void M_time_tolocal (\fBM_time_t\fP t, M_time_localtm_t * ltime, const \fBM_time_tz_t\fP * tz)"
Convert a UTC time to a local time struct\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP The UTC time\&. 
.br
\fIltime\fP The local time struct\&. 
.br
\fItz\fP The time zone the local time is in\&. 
.RE
.PP

.SS "void M_time_togm (\fBM_time_t\fP t, M_time_gmtm_t * tm)"
Convert a UTC time to a broken out time struct\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP UTC time\&. 
.br
\fItm\fP Time struct\&. 
.RE
.PP

.SS "\fBM_time_t\fP M_time_fromgm (M_time_gmtm_t * tm)"
Convert a broken out time struct to a unix timestamp\&.
.PP
\fBParameters:\fP
.RS 4
\fItm\fP The time struct\&. This will be normalized\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Time stamp\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
