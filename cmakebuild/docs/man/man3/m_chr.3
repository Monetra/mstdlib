.TH "m_chr" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_chr
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef M_bool(* \fBM_chr_predicate_func\fP) (char c)"
.br
.ti -1c
.RI "typedef char(* \fBM_chr_map_func\fP) (char)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "M_bool \fBM_chr_isalnum\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isalnumsp\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isalpha\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isalphasp\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isascii\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isblank\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_iscntrl\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isdigit\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isdec\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isgraph\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_islower\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isupper\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isprint\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_ispunct\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_isspace\fP (char c)"
.br
.ti -1c
.RI "M_bool \fBM_chr_ishex\fP (char c)"
.br
.ti -1c
.RI "char \fBM_chr_tolower\fP (char c)"
.br
.ti -1c
.RI "char \fBM_chr_toupper\fP (char c)"
.br
.ti -1c
.RI "int \fBM_chr_digit\fP (char c)"
.br
.ti -1c
.RI "int \fBM_chr_xdigit\fP (char c)"
.br
.in -1c
.SH "Detailed Description"
.PP 
ASCII character checks and conversion\&.
.PP
Handles checking if a caracter is a certain type\&. Also handles converting characters to other representations\&. Such as to lowercase, and to uppercase\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef M_bool(* M_chr_predicate_func) (char c)"

.SS "typedef char(* M_chr_map_func) (char)"

.SH "Function Documentation"
.PP 
.SS "M_bool M_chr_isalnum (char c)"
Checks for an alphanumeric character\&.
.PP
Equivalent regular expression: \fC[A-Za-z0-9]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isalnumsp (char c)"
Checks for an alphanumeric character, spaces allowed\&.
.PP
Equivalent regular expression: \fC[A-Za-z0-9 ]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isalpha (char c)"
Checks for an alphabetic character\&.
.PP
Equivalent regular expression: \fC[A-Za-z]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isalphasp (char c)"
Checks for an alphabetic character, spaces allowed\&.
.PP
Equivalent regular expression: \fC[A-Za-z ]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isascii (char c)"
Checks for 7-bit ASCII character\&.
.PP
Equivalent regular expression: \fC[\\x00-\\x7f]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isblank (char c)"
Checks for a blank character\&.
.PP
Equivalent regular expression: \fC[ \\t]\fP
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_iscntrl (char c)"
Checks for a control character\&.
.PP
Equivalent regular expression: \fC[ \\t]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isdigit (char c)"
Checks for a digit zero through nine\&.
.PP
Equivalent regular expression: \fC[0-9]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isdec (char c)"
Checks for a digit zero through nine or a period\&.
.PP
Equivalent regular expression: \fC[0-9.]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isgraph (char c)"
Checks for any printable character except space\&.
.PP
Equivalent regular expression: \fC[!-~]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_islower (char c)"
Checks for a lower-case character [a-z]\&.
.PP
Equivalent regular expression: \fC[a-z]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isupper (char c)"
Checks for an uppercase letter\&.
.PP
Equivalent regular expression: \fC[A-Z]\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isprint (char c)"
Checks for any printable character including space\&.
.PP
Equivalent regular expression: \fC[ -~]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_ispunct (char c)"
Checks for any printable character which is not a space or an alphanumeric character\&.
.PP
Equivalent regular expression: \fC[!-/:-@[-`{-~]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_isspace (char c)"
Checks for white-space characters\&.
.PP
Equivalent regular expression: \fC[\\f\\n\\r\\t\\v]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "M_bool M_chr_ishex (char c)"
Checks for a hexadecimal digits\&.
.PP
Equivalent regular expression: \fC[0-9a-fA-F]\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to check\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if in character class or false if not\&. 
.RE
.PP

.SS "char M_chr_tolower (char c)"
Convert character to lower case, if possible\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to convert\&.
.RE
.PP
\fBReturns:\fP
.RS 4
c if not uppercase, otherwise the lowercase equivalent of c\&. 
.RE
.PP

.SS "char M_chr_toupper (char c)"
Convert character to upper case, if possible
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The character to convert\&.
.RE
.PP
\fBReturns:\fP
.RS 4
c if not lowercase, otherwise the uppercase equivalent of c 
.RE
.PP

.SS "int M_chr_digit (char c)"
Convert a base-10 digit represented as a character to its corresponding integer representation\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The decimal character to convert\&.
.RE
.PP
\fBReturns:\fP
.RS 4
0-9 on valid input, -1 if c is not a digit\&. 
.RE
.PP

.SS "int M_chr_xdigit (char c)"
Convert a base-16 (hexadecimal) digit represented as a character to its corresponding integer representation\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The hexadecimal character to convert\&.
.RE
.PP
\fBReturns:\fP
.RS 4
0-9 on valid input, -1 if c is not a digit\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
