.TH "m_thread_common_once" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_thread_common_once
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBM_thread_once_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBM_THREAD_ONCE_STATIC_INITIALIZER\fP   { M_FALSE, \fBM_THREAD_SPINLOCK_STATIC_INITIALIZER\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "M_bool \fBM_thread_once\fP (\fBM_thread_once_t\fP *once_control, void(*init_routine)(M_uint64 flags), M_uint64 init_flags)"
.br
.ti -1c
.RI "M_bool \fBM_thread_once_reset\fP (\fBM_thread_once_t\fP *once_control)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Threadsafe initialization helpers (Thread Once) 
.SH "Data Structure Documentation"
.PP 
.SH "struct M_thread_once_t"
.PP 
Public struct for M_thread_once, so static initializer can be used 
.PP
\fBData Fields:\fP
.RS 4
M_bool \fIinitialized\fP 
.br
.PP
\fBM_thread_spinlock_t\fP \fIspinlock\fP 
.br
.PP
.RE
.PP
.SH "Macro Definition Documentation"
.PP 
.SS "#define M_THREAD_ONCE_STATIC_INITIALIZER   { M_FALSE, \fBM_THREAD_SPINLOCK_STATIC_INITIALIZER\fP }"
Static initializer for M_thread_once 
.SH "Function Documentation"
.PP 
.SS "M_bool M_thread_once (\fBM_thread_once_t\fP * once_control, void(*)(M_uint64 flags) init_routine, M_uint64 init_flags)"
Ensure an initialization routine is performed only once, even if called from multiple threads simultaneously\&.
.PP
Performing initialization in a multi-threaded program can cause race conditions\&.
.PP
Take this code example: static int initialized = 0; if (!initialized) { init_routine(); initialized = 1; }
.PP
If two threads where to enter this simultaneously, before init_routine() was complete, they would call it twice\&. The above code example can be replaced with:
.PP
static \fBM_thread_once_t\fP initialized = M_THREAD_ONCE_STATIC_INITIALIZER; M_thread_once(&initialized, init_routine);
.PP
\fBParameters:\fP
.RS 4
\fIonce_control\fP Once control variable passed by reference, and first set to M_THREAD_ONCE_STATIC_INITIALIZER; 
.br
\fIinit_routine\fP Initialization routine to be called if it has not yet been called\&. 
.br
\fIinit_flags\fP Flags to be passed onto the initialization routine\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if init routine was just run, M_FALSE if not run (previously run) 
.RE
.PP

.SS "M_bool M_thread_once_reset (\fBM_thread_once_t\fP * once_control)"
Reset the once_control object back to an uninitialized state\&. Useful to be called in a destructor so an initialization routine can be re-run\&.
.PP
\fBParameters:\fP
.RS 4
\fIonce_control\fP Once control variable passed by reference, and first set to M_THREAD_ONCE_STATIC_INITIALIZER; 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if reset, M_FALSE if not initialized\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
