.TH "m_str_search" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_str_search
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBM_str_chr\fP (const char *s, char c) M_WARN_UNUSED_RESULT"
.br
.ti -1c
.RI "char * \fBM_str_rchr\fP (const char *s, char c) M_WARN_UNUSED_RESULT"
.br
.ti -1c
.RI "char * \fBM_str_find_first_from_charset\fP (const char *str, const char *charset)"
.br
.ti -1c
.RI "char * \fBM_str_find_first_not_from_charset\fP (const char *str, const char *charset)"
.br
.ti -1c
.RI "char * \fBM_str_str\fP (const char *haystack, const char *needle) M_WARN_UNUSED_RESULT"
.br
.ti -1c
.RI "char * \fBM_str_casestr\fP (const char *haystack, const char *needle) M_WARN_UNUSED_RESULT"
.br
.ti -1c
.RI "ssize_t \fBM_str_casestr_pos\fP (const char *haystack, const char *needle) M_WARN_UNUSED_RESULT"
.br
.in -1c
.SH "Detailed Description"
.PP 
String Searching 
.SH "Function Documentation"
.PP 
.SS "char* M_str_chr (const char * s, char c)"
Find the first occurrence of c in s\&.
.PP
\fBSee also:\fP
.RS 4
\fBM_str_rchr\fP 
.PP
\fBM_str_str\fP 
.PP
\fBM_str_find_first_from_charset\fP 
.PP
\fBM_str_find_first_not_from_charset\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP NULL-terminated string\&. 
.br
\fIc\fP Character to search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
NULL if s is NULL or c is not found\&. Otherwise a pointer to the first occurrence of c in s\&. 
.RE
.PP

.SS "char* M_str_rchr (const char * s, char c)"
Find the last occurrence of c in s\&.
.PP
\fBSee also:\fP
.RS 4
\fBM_str_chr\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP NULL-terminated string\&. 
.br
\fIc\fP Character to search for\&.
.RE
.PP
\fBReturns:\fP
.RS 4
NULL if s is NULL or c is not found\&. Otherwise a pointer to the last occurrence of c in s\&. 
.RE
.PP

.SS "char* M_str_find_first_from_charset (const char * str, const char * charset)"
Find the first occurence in \fIstr\fP of any character in \fIcharset\fP\&.
.PP
This is identical to C standard function strpbrk(), except that it treats NULL pointers as empty strings instead of segfaulting\&.
.PP
\fBSee also:\fP
.RS 4
\fBM_str_find_first_not_from_charset\fP 
.PP
\fBM_str_chr\fP 
.PP
\fBM_str_str\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP string to search in (stored as NULL-terminated C string)\&. 
.br
\fIcharset\fP list of chars to search for (stored as NULL-terminated C string)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to first matching character from \fIcharset\fP in \fIstr\fP, or NULL if no matches found 
.RE
.PP

.SS "char* M_str_find_first_not_from_charset (const char * str, const char * charset)"
Find the first occurence in \fIstr\fP of any character that's not in \fIcharset\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBM_str_find_first_from_charset\fP 
.PP
\fBM_str_chr\fP 
.PP
\fBM_str_str\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP string to search in (stored as NULL-terminated C string)\&. 
.br
\fIcharset\fP list of chars to skip (stored as NULL-terminated C string)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to first char in \fIstr\fP that's not in \fIcharset\fP, or NULL if no matches found 
.RE
.PP

.SS "char* M_str_str (const char * haystack, const char * needle)"
A wrapper around strstr that treats NULL as the empty string\&.
.PP
\fBSee also:\fP
.RS 4
\fBM_str_chr\fP 
.PP
\fBM_str_find_first_from_charset\fP 
.PP
\fBM_str_find_first_not_from_charset\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhaystack\fP String to search\&. 
.br
\fIneedle\fP String to search for in haystack\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the first occurrence of needle in haystack; otherwise NULL 
.RE
.PP

.SS "char* M_str_casestr (const char * haystack, const char * needle)"
A wrapper around strstr that ignores case and treats NULL as the empty string\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaystack\fP String to search\&. 
.br
\fIneedle\fP String to search for in haystack\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the first occurrence of needle in haystack; otherwise NULL 
.RE
.PP

.SS "ssize_t M_str_casestr_pos (const char * haystack, const char * needle)"
A wrapper around strstr that ignores case and treats NULL as the empty string\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaystack\fP String to search\&. 
.br
\fIneedle\fP String to search for in haystack\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Integer index to the first occurrence of needle in haystack; otherwise -1 if needle is not a substring of haystack 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
