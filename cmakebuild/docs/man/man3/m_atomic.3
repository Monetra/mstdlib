.TH "m_atomic" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_atomic
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "M_bool \fBM_atomic_cas32\fP (volatile M_uint32 *ptr, M_uint32 expected, M_uint32 newval)"
.br
.ti -1c
.RI "M_bool \fBM_atomic_cas64\fP (volatile M_uint64 *ptr, M_uint64 expected, M_uint64 newval)"
.br
.ti -1c
.RI "M_uint32 \fBM_atomic_inc_u32\fP (volatile M_uint32 *ptr)"
.br
.ti -1c
.RI "M_uint64 \fBM_atomic_inc_u64\fP (volatile M_uint64 *ptr)"
.br
.ti -1c
.RI "M_uint32 \fBM_atomic_dec_u32\fP (volatile M_uint32 *ptr)"
.br
.ti -1c
.RI "M_uint64 \fBM_atomic_dec_u64\fP (volatile M_uint64 *ptr)"
.br
.ti -1c
.RI "M_uint32 \fBM_atomic_add_u32\fP (volatile M_uint32 *ptr, M_uint32 val)"
.br
.ti -1c
.RI "M_uint64 \fBM_atomic_add_u64\fP (volatile M_uint64 *ptr, M_uint64 val)"
.br
.ti -1c
.RI "M_uint32 \fBM_atomic_sub_u32\fP (volatile M_uint32 *ptr, M_uint32 val)"
.br
.ti -1c
.RI "M_uint64 \fBM_atomic_sub_u64\fP (volatile M_uint64 *ptr, M_uint64 val)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Operations which are guaranteed to be atomic\&. 
.SH "Function Documentation"
.PP 
.SS "M_bool M_atomic_cas32 (volatile M_uint32 * ptr, M_uint32 expected, M_uint32 newval)"
Compare and swap 32bit integer\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on 
.br
\fIexpected\fP Expected value of var before completing operation 
.br
\fInewval\fP Value to set var to 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, M_FALSE on failure 
.RE
.PP

.SS "M_bool M_atomic_cas64 (volatile M_uint64 * ptr, M_uint64 expected, M_uint64 newval)"
Compare and swap 64bit integer\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on 
.br
\fIexpected\fP Expected value of var before completing operation 
.br
\fInewval\fP Value to set var to 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, M_FALSE on failure 
.RE
.PP

.SS "M_uint32 M_atomic_inc_u32 (volatile M_uint32 * ptr)"
Increment u32 by 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint64 M_atomic_inc_u64 (volatile M_uint64 * ptr)"
Increment u64 by 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint32 M_atomic_dec_u32 (volatile M_uint32 * ptr)"
Decrement u32 by 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint64 M_atomic_dec_u64 (volatile M_uint64 * ptr)"
Decrement u64 by 1\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint32 M_atomic_add_u32 (volatile M_uint32 * ptr, M_uint32 val)"
Add a given value with u32\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&. 
.br
\fIval\fP Value to modify ptr with\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint64 M_atomic_add_u64 (volatile M_uint64 * ptr, M_uint64 val)"
Add a given value with u64\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&. 
.br
\fIval\fP Value to modify ptr with\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint32 M_atomic_sub_u32 (volatile M_uint32 * ptr, M_uint32 val)"
Subtract a given value with u32\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&. 
.br
\fIval\fP Value to modify ptr with\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SS "M_uint64 M_atomic_sub_u64 (volatile M_uint64 * ptr, M_uint64 val)"
Subtract a given value with u64\&.
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP Pointer to var to operate on\&. 
.br
\fIval\fP Value to modify ptr with\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The value of pointer before operation\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
