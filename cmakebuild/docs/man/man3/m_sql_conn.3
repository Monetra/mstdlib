.TH "m_sql_conn" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_sql_conn
.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBSQL Pool Tracing\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct M_sql_connpool \fBM_sql_connpool_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBM_sql_connpool_flags_t\fP { \fBM_SQL_CONNPOOL_FLAG_NONE\fP = 0, \fBM_SQL_CONNPOOL_FLAG_PRESPAWN_ALL\fP = 1 << 0, \fBM_SQL_CONNPOOL_FLAG_NO_AUTORETRY_QUERY\fP = 1 << 1, \fBM_SQL_CONNPOOL_FLAG_LOAD_BALANCE\fP = 1 << 2 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_connpool_create\fP (\fBM_sql_connpool_t\fP **pool, const char *driver, const char *conn_str, const char *username, const char *password, size_t max_conns, M_uint32 flags, char *error, size_t error_size)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_connpool_add_readonly_pool\fP (\fBM_sql_connpool_t\fP *pool, const char *conn_str, size_t max_conns, char *error, size_t error_size)"
.br
.ti -1c
.RI "void \fBM_sql_connpool_set_timeouts\fP (\fBM_sql_connpool_t\fP *pool, \fBM_time_t\fP reconnect_time_s, \fBM_time_t\fP max_idle_time_s, \fBM_time_t\fP fallback_s)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_connpool_start\fP (\fBM_sql_connpool_t\fP *pool, char *error, size_t error_size)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_connpool_destroy\fP (\fBM_sql_connpool_t\fP *pool)"
.br
.ti -1c
.RI "size_t \fBM_sql_connpool_active_conns\fP (\fBM_sql_connpool_t\fP *pool, M_bool readonly)"
.br
.ti -1c
.RI "const char * \fBM_sql_connpool_server_version\fP (\fBM_sql_connpool_t\fP *pool)"
.br
.ti -1c
.RI "const char * \fBM_sql_connpool_driver_display_name\fP (\fBM_sql_connpool_t\fP *pool)"
.br
.ti -1c
.RI "const char * \fBM_sql_connpool_driver_name\fP (\fBM_sql_connpool_t\fP *pool)"
.br
.ti -1c
.RI "const char * \fBM_sql_connpool_driver_version\fP (\fBM_sql_connpool_t\fP *pool)"
.br
.in -1c
.SH "Detailed Description"
.PP 
SQL Connection Management 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct M_sql_connpool \fBM_sql_connpool_t\fP"
Connection pool object 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBM_sql_connpool_flags_t\fP"
Flags controlling behavior of the connection pool 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIM_SQL_CONNPOOL_FLAG_NONE \fP\fP
No special pool flags 
.TP
\fB\fIM_SQL_CONNPOOL_FLAG_PRESPAWN_ALL \fP\fP
Pre-spawn all connections, not just the first\&. Without this, the remaining connections are on-demand 
.TP
\fB\fIM_SQL_CONNPOOL_FLAG_NO_AUTORETRY_QUERY \fP\fP
If a non-transactional query is rolled back due to a deadlock or connectivity failure, the default behavior is to automatically retry the query, indefinitely\&. For queries executed as part of a transaction, rollbacks must be handled by the caller as they may be dependent on prior queries in the transaction\&. This flag will turn off the auto-retry logic 
.TP
\fB\fIM_SQL_CONNPOOL_FLAG_LOAD_BALANCE \fP\fP
If there are multiple servers specified for the connection string, this will load balance requests across the servers instead of using them for failover\&. 
.SH "Function Documentation"
.PP 
.SS "\fBM_sql_error_t\fP M_sql_connpool_create (\fBM_sql_connpool_t\fP ** pool, const char * driver, const char * conn_str, const char * username, const char * password, size_t max_conns, M_uint32 flags, char * error, size_t error_size)"
Create an SQL connection pool\&.
.PP
A connection pool is required to be able to run SQL transactions\&. An internal connection is automatically claimed for a transaction or statement, or will wait on an available connection\&.
.PP
\fBNote:\fP
.RS 4
The pool is not started untile \fBM_sql_connpool_start()\fP is called, which must occur before the pool can be used by \fBM_sql_stmt_execute()\fP or \fBM_sql_trans_begin()\fP\&.
.RE
.PP
\fBWarning:\fP
.RS 4
Pool modifications such as \fBM_sql_connpool_add_readonly_pool()\fP and \fBM_sql_connpool_add_trace()\fP must be called prior to \fBM_sql_connpool_start()\fP\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Newly initialized pool object 
.br
\fIdriver\fP Name of driver to use\&. If the driver is not already loaded, will attempt to load the driver module automatically\&. Driver modules are named mstdlib_sql_$driver\&.dll or mstdlib_sql_$driver\&.so as appropriate\&. 
.br
\fIconn_str\fP A driver-specific connection string or DSN\&. This string often configures the host/port, and available options for the driver in use\&. The connection strings are a set of key/value pairs, with keys seperated from the values with an equal sign (=), and values separated by a semi-colon (;)\&. If quoting is in use, a single-quote (') is recognized, and an escape character of a single quote (') can be used such that to use a real single quote, you would use two single quotes\&. E\&.g\&. : 
.PP
.nf
host=10\&.130\&.40\&.5:3306;ssl=yes 

.fi
.PP
 Please see the documentation for your driver for available configuration options\&. 
.br
\fIusername\fP Connection username\&. 
.br
\fIpassword\fP Connection password\&. 
.br
\fImax_conns\fP Maximum number of SQL connections to attempt to create\&. Valid range 1-1000\&. 
.br
\fIflags\fP Bitmap of \fBM_sql_connpool_flags_t\fP options to configure\&. 
.br
\fIerror\fP Buffer to hold error message\&. 
.br
\fIerror_size\fP Size of error buffer passed in\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on successful pool creation, otherwise one of the \fBM_sql_error_t\fP errors\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_connpool_add_readonly_pool (\fBM_sql_connpool_t\fP * pool, const char * conn_str, size_t max_conns, char * error, size_t error_size)"
Create a read-only pool attached to our already-created pool\&.
.PP
The read-only pool will automatically route SELECT transactions, not part of a transaction (e\&.g\&. not within a \fBM_sql_trans_begin()\fP \&.\&.\&. \fBM_sql_trans_commit()\fP block) to the read-only pool\&. This can be useful for report generation, where the data is coming from an asyncronous replication pool for reducing load on the master\&.
.PP
\fBNote:\fP
.RS 4
The caller can optionally use \fBM_sql_stmt_set_master_only()\fP to enforce routing of SELECT transactions to the read/write pool instead\&.
.RE
.PP
The read-only pool must share the same driver, username, password, and usage flags as specified via \fBM_sql_connpool_create()\fP, and must be called before \fBM_sql_connpool_start()\fP\&.
.PP
Only a single read-only pool per pool object is allowed, repeated calls to this function will result in a failure\&.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object by \fBM_sql_connpool_create()\fP\&. 
.br
\fIconn_str\fP A driver-specific connection string or DSN\&. This string often configures the host/port, and available options for the driver in use\&. The connection strings are a set of key/value pairs, with keys seperated from the values with an equal sign (=), and values separated by a semi-colon (;)\&. If quoting is in use, a single-quote (') is recognized, and an escape character of a single quote (') can be used such that to use a real single quote, you would use two single quotes\&. E\&.g\&. : 
.PP
.nf
host=10\&.130\&.40\&.5:3306;ssl=yes 

.fi
.PP
 Please see the documentation for your driver for available configuration options\&. 
.br
\fImax_conns\fP Maximum number of SQL connections to attempt to create\&. Valid range 1-1000\&. 
.br
\fIerror\fP Buffer to hold error message\&. 
.br
\fIerror_size\fP Size of error buffer passed in\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on successful readonly pool creation, otherwise one of the \fBM_sql_error_t\fP errors\&. 
.RE
.PP

.SS "void M_sql_connpool_set_timeouts (\fBM_sql_connpool_t\fP * pool, \fBM_time_t\fP reconnect_time_s, \fBM_time_t\fP max_idle_time_s, \fBM_time_t\fP fallback_s)"
Set timeouts for connections on the pool\&. Timeouts can be used to prevent stale connections from being used if known firewall timers expire, or to force reconnects to possibly rebalance connections across multiple servers\&.
.PP
Typically these should be set before \fBM_sql_connpool_start()\fP however it is safe to change these on an active pool\&.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized connection pool object 
.br
\fIreconnect_time_s\fP How many seconds to allow a connection to be used before a disconnection is forced\&. The connection will be terminated even if not idle, termination will occur when a connection is returned to the pool instead of prior to use to prevent unexpected delays\&. This can be used to either redistribute load after a node failure when load balancing, or to fall back to a prior host\&. Set to 0 for infinite, set to -1 to not change the current value\&. Default is 0\&. 
.br
\fImax_idle_time_s\fP Maximum amount of time a connection can have been idle to be used\&. Some firewalls may lose connection state after a given duration, so it may be advisable to set this to below that threshold so the connection will be forcibly terminated rather than use\&. The connection will be terminated before use and the consumer will attempt to grab a different connection from the pool, or start a new one if none are available\&. Set to 0 for infinite, set to -1 to not change the current value\&. Default is 0\&. 
.br
\fIfallback_s\fP Number of seconds when a connection error occurs to a host before it is eligible for 'fallback'\&. If this isn't set, the only time the first host will be re-used is if the secondary host(s) also fail\&. This should be used in conjunction with reconnect_time_s\&. Set to 0 to never fallback, or -1 to not change the current value\&. Not relevant for load balancing, the host will always be in the attempt pool\&. Default is 0\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_connpool_start (\fBM_sql_connpool_t\fP * pool, char * error, size_t error_size)"
Start the connection pool and make it ready for use\&.
.PP
At least one connection from the primary pool, and optionally the read-only pool will be started, controlled via the \fBM_SQL_CONNPOOL_FLAG_PRESPAWN_ALL\fP flag\&.
.PP
If this returns a failure, either it can be attempted to be started again, or should be destroyed with \fBM_sql_connpool_destroy()\fP\&. No other functions are eligible for use after a failed start\&.
.PP
\fBNote:\fP
.RS 4
This must be called once prior to being able to use \fBM_sql_stmt_execute()\fP or \fBM_sql_trans_begin()\fP, but must be called after \fBM_sql_connpool_add_readonly_pool()\fP or \fBM_sql_connpool_add_trace()\fP\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object by \fBM_sql_connpool_create()\fP\&. 
.br
\fIerror\fP Buffer to hold error message\&. 
.br
\fIerror_size\fP Size of error buffer passed in\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on successful readonly pool creation, otherwise one of the \fBM_sql_error_t\fP errors\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_connpool_destroy (\fBM_sql_connpool_t\fP * pool)"
Destroy the SQL connection pool and close all open connections\&.
.PP
All connections must be idle/unused or will return a failure\&.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Pool object to be destroyed 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on successful pool destruction, otherwise one of the \fBM_sql_error_t\fP errors\&. 
.RE
.PP

.SS "size_t M_sql_connpool_active_conns (\fBM_sql_connpool_t\fP * pool, M_bool readonly)"
Count of active/connected SQL connections\&.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object 
.br
\fIreadonly\fP M_TRUE if querying for readonly connections, M_FALSE for primary
.RE
.PP
\fBReturns:\fP
.RS 4
count of active/connected SQL connections\&. 
.RE
.PP

.SS "const char* M_sql_connpool_server_version (\fBM_sql_connpool_t\fP * pool)"
SQL server name and version
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object
.RE
.PP
\fBReturns:\fP
.RS 4
SQL server name and version 
.RE
.PP

.SS "const char* M_sql_connpool_driver_display_name (\fBM_sql_connpool_t\fP * pool)"
SQL driver display (pretty) name
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object
.RE
.PP
\fBReturns:\fP
.RS 4
SQL driver pretty name 
.RE
.PP

.SS "const char* M_sql_connpool_driver_name (\fBM_sql_connpool_t\fP * pool)"
SQL driver internal/short name
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object
.RE
.PP
\fBReturns:\fP
.RS 4
SQL driver internal/short name 
.RE
.PP

.SS "const char* M_sql_connpool_driver_version (\fBM_sql_connpool_t\fP * pool)"
SQL driver version (not db version)
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object
.RE
.PP
\fBReturns:\fP
.RS 4
SQL driver version (not db version) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
