.TH "m_log_file" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_log_file
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBM_log_error_t\fP \fBM_log_module_add_file\fP (\fBM_log_t\fP *log, const char *log_file_path, size_t num_to_keep, M_uint64 autorotate_size, M_uint64 autorotate_time_s, size_t max_queue_bytes, const char *archive_cmd, const char *archive_file_ext, \fBM_log_module_t\fP **out_mod)"
.br
.ti -1c
.RI "\fBM_log_error_t\fP \fBM_log_module_file_rotate\fP (\fBM_log_t\fP *log, \fBM_log_module_t\fP *module)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Functions to enable logging to a group of files on disk\&. Includes support for log rotation and compression\&. 
.SH "Function Documentation"
.PP 
.SS "\fBM_log_error_t\fP M_log_module_add_file (\fBM_log_t\fP * log, const char * log_file_path, size_t num_to_keep, M_uint64 autorotate_size, M_uint64 autorotate_time_s, size_t max_queue_bytes, const char * archive_cmd, const char * archive_file_ext, \fBM_log_module_t\fP ** out_mod)"
Add a module to output to a rotating list of files on disk\&.
.PP
When archiving a file, the uncompressed file name will be appended directly onto whatever archive command is supplied by the user, then executed in its own process\&. In order for rotation to work correctly, the output file produced by the command must be exactly equal to \fC[uncompressed file][archive_file_ext]\fP\&.
.PP
The automatic file rotation parameters (\fIautorotate_size\fP and \fIautorotate_time_s\fP) can be disabled by setting them to a value of 0\&. If both are disabled, rotations will only happen when \fBM_log_module_file_rotate()\fP is explicitly called by the user\&.
.PP
The behavior of time-based autorotate is platform dependent\&. On platforms that allow you to query file creation time (e\&.g\&., Windows, macOS, BSD), the age of the file is calculated from its creation date\&. On platforms that don't keep track of file creation time (e\&.g\&., Linux), the age of the file is calculated using an internal timer that starts when the file is first opened\&. On such platforms, the age of the head log file is effectively reset to zero whenever you restart the process\&.
.PP
\fBParameters:\fP
.RS 4
\fIlog\fP logger object 
.br
\fIlog_file_path\fP main log file to output (if relative path, interpreted relative to current working dir) 
.br
\fInum_to_keep\fP number of older rotated log files to keep on disk, or 0 to keep no old files 
.br
\fIautorotate_size\fP size (in bytes) after which the main log file is rotated, or 0 to disable size autorotate 
.br
\fIautorotate_time_s\fP time (in seconds) after which the main log file is rotated, or 0 to disable time autorotate 
.br
\fImax_queue_bytes\fP max size of queue used to buffer asynchronous writes to the log file 
.br
\fIarchive_cmd\fP command used to compress old log files (e\&.g\&., 'bzip2 -f')\&. If NULL, compression is disabled\&. 
.br
\fIarchive_file_ext\fP extension added to files by \fIarchive_cmd\fP (e\&.g\&., '\&.bz2')\&. If NULL, compression is disabled\&. 
.br
\fIout_mod\fP handle for created module, or \fCNULL\fP if there was an error\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
error code 
.RE
.PP

.SS "\fBM_log_error_t\fP M_log_module_file_rotate (\fBM_log_t\fP * log, \fBM_log_module_t\fP * module)"
Manually trigger a file rotation\&.
.PP
This can be used to rotate the main log file on some other condition than size - like receiving SIGHUP, or on some sort of timer\&. If the internal message queue is empty, the rotation will happen immediately\&. If not, the rotation will happen after the internal worker thread finishes writing the message it's currently working on\&.
.PP
\fBParameters:\fP
.RS 4
\fIlog\fP logger object 
.br
\fImodule\fP handle of module to operate on 
.RE
.PP
\fBReturns:\fP
.RS 4
error code 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
