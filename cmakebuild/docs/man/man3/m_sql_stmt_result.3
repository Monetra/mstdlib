.TH "m_sql_stmt_result" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_sql_stmt_result
.SH SYNOPSIS
.br
.PP
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBM_sql_data_type_t\fP { \fBM_SQL_DATA_TYPE_UNKNOWN\fP = 0, \fBM_SQL_DATA_TYPE_BOOL\fP = 1, \fBM_SQL_DATA_TYPE_INT16\fP = 2, \fBM_SQL_DATA_TYPE_INT32\fP = 3, \fBM_SQL_DATA_TYPE_INT64\fP = 4, \fBM_SQL_DATA_TYPE_TEXT\fP = 5, \fBM_SQL_DATA_TYPE_BINARY\fP = 6, \fBM_SQL_DATA_TYPE_NULL\fP = 7 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "size_t \fBM_sql_stmt_result_affected_rows\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "size_t \fBM_sql_stmt_result_num_rows\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "size_t \fBM_sql_stmt_result_total_rows\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "size_t \fBM_sql_stmt_result_num_cols\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "const char * \fBM_sql_stmt_result_col_name\fP (\fBM_sql_stmt_t\fP *stmt, size_t col)"
.br
.ti -1c
.RI "\fBM_sql_data_type_t\fP \fBM_sql_stmt_result_col_type\fP (\fBM_sql_stmt_t\fP *stmt, size_t col, size_t *type_size)"
.br
.ti -1c
.RI "M_bool \fBM_sql_stmt_result_col_idx\fP (\fBM_sql_stmt_t\fP *stmt, const char *col, size_t *idx)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_isnull\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, M_bool *is_null)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_text\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, const char **text)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_bool\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, M_bool *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_int16\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, M_int16 *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_int32\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, M_int32 *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_int64\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, M_int64 *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_binary\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, const M_uint8 **bin, size_t *bin_size)"
.br
.ti -1c
.RI "M_bool \fBM_sql_stmt_result_isnull_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col)"
.br
.ti -1c
.RI "const char * \fBM_sql_stmt_result_text_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col)"
.br
.ti -1c
.RI "M_bool \fBM_sql_stmt_result_bool_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col)"
.br
.ti -1c
.RI "M_int16 \fBM_sql_stmt_result_int16_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col)"
.br
.ti -1c
.RI "M_int32 \fBM_sql_stmt_result_int32_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col)"
.br
.ti -1c
.RI "M_int64 \fBM_sql_stmt_result_int64_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col)"
.br
.ti -1c
.RI "const M_uint8 * \fBM_sql_stmt_result_binary_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, size_t col, size_t *bin_size)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_isnull_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, M_bool *is_null)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_text_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, const char **text)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_bool_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, M_bool *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_int16_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, M_int16 *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_int32_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, M_int32 *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_int64_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, M_int64 *val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_result_binary_byname\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, const M_uint8 **bin, size_t *bin_size)"
.br
.ti -1c
.RI "M_bool \fBM_sql_stmt_result_isnull_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col)"
.br
.ti -1c
.RI "const char * \fBM_sql_stmt_result_text_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col)"
.br
.ti -1c
.RI "M_bool \fBM_sql_stmt_result_bool_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col)"
.br
.ti -1c
.RI "M_int16 \fBM_sql_stmt_result_int16_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col)"
.br
.ti -1c
.RI "M_int32 \fBM_sql_stmt_result_int32_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col)"
.br
.ti -1c
.RI "M_int64 \fBM_sql_stmt_result_int64_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col)"
.br
.ti -1c
.RI "const M_uint8 * \fBM_sql_stmt_result_binary_byname_direct\fP (\fBM_sql_stmt_t\fP *stmt, size_t row, const char *col, size_t *bin_size)"
.br
.in -1c
.SH "Detailed Description"
.PP 
SQL Statement Result Processing 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBM_sql_data_type_t\fP"
Possible data type response values 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIM_SQL_DATA_TYPE_UNKNOWN \fP\fP
Not Known, not yet set, most likely an error 
.TP
\fB\fIM_SQL_DATA_TYPE_BOOL \fP\fP
Implemented as an 8bit integer 
.TP
\fB\fIM_SQL_DATA_TYPE_INT16 \fP\fP
16bit signed integer 
.TP
\fB\fIM_SQL_DATA_TYPE_INT32 \fP\fP
32bit signed integer 
.TP
\fB\fIM_SQL_DATA_TYPE_INT64 \fP\fP
64bit signed integer 
.TP
\fB\fIM_SQL_DATA_TYPE_TEXT \fP\fP
Textual data type such as VARCHAR or TEXT, with possible length 
.TP
\fB\fIM_SQL_DATA_TYPE_BINARY \fP\fP
Binary data type such as BLOB or BINARY, with possible length 
.TP
\fB\fIM_SQL_DATA_TYPE_NULL \fP\fP
NOTE: used internally only, will not be returned by \fBM_sql_stmt_result_col_type()\fP 
.SH "Function Documentation"
.PP 
.SS "size_t M_sql_stmt_result_affected_rows (\fBM_sql_stmt_t\fP * stmt)"
Retrieve the number of rows affected by the executed statement\&.
.PP
Does not apply to SELECT statements, used often on UPDATE and DELETE statements to reflect how many rows were affected\&.
.PP
NOTE: On update, if updating a row in the database, and the passed in fields being updated are the same as the database already contains, depending on the backend database driver, that row may or may not be included\&. Developers should not rely on this behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
affected rows\&. 
.RE
.PP

.SS "size_t M_sql_stmt_result_num_rows (\fBM_sql_stmt_t\fP * stmt)"
Retrieve the number of cached rows in statement handle\&.
.PP
There may be additional rows yet to be fetched if not retrieving all rows at once\&. This function will return only the number of cached rows client-side, each time \fBM_sql_stmt_fetch()\fP is called, previous cached rows are cleared\&. This result is NOT cumulative\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
row count 
.RE
.PP

.SS "size_t M_sql_stmt_result_total_rows (\fBM_sql_stmt_t\fP * stmt)"
Retrieve the number of total rows that have been fetched so far\&.
.PP
This number may be greater than or equal to \fBM_sql_stmt_result_num_rows()\fP as each call to \fBM_sql_stmt_fetch()\fP will clear the current cached rows (and count), but this value will continue to increment\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
total row count fetched so far\&. 
.RE
.PP

.SS "size_t M_sql_stmt_result_num_cols (\fBM_sql_stmt_t\fP * stmt)"
Retrieve the number of columns returned from the server in response to a query\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
column count\&. 
.RE
.PP

.SS "const char* M_sql_stmt_result_col_name (\fBM_sql_stmt_t\fP * stmt, size_t col)"
Retrieve the name of a returned column\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized and executed \fBM_sql_stmt_t\fP object\&. 
.br
\fIcol\fP Index of column\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
column name or NULL on failure\&. 
.RE
.PP

.SS "\fBM_sql_data_type_t\fP M_sql_stmt_result_col_type (\fBM_sql_stmt_t\fP * stmt, size_t col, size_t * type_size)"
Retrieve the data type of the returned column\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized and executed \fBM_sql_stmt_t\fP object\&. 
.br
\fIcol\fP Index of column\&. 
.br
\fItype_size\fP Optional, pass NULL if not desired\&. For TEXT and BINARY types, the column definition may indicate a possible size (or maximum size)\&. If the value is 0, it means the column width is bounded by the maximums of the SQL server\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Column type for referenced column\&. 
.RE
.PP

.SS "M_bool M_sql_stmt_result_col_idx (\fBM_sql_stmt_t\fP * stmt, const char * col, size_t * idx)"
Retrieve the column index by name
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized and executed \fBM_sql_stmt_t\fP object\&. 
.br
\fIcol\fP Column name, case insensitive\&. 
.br
\fIidx\fP Index of column\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, M_FALSE if column not found\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_isnull (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, M_bool * is_null)"
Retrieve if a cell is NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIis_null\fP Return whether column is NULL or not\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_text (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, const char ** text)"
Retrieve a textual cell from the resultset\&.
.PP
All cell types may be retrieved in their textual form\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fItext\fP Output constant pointer to cell data\&. May be NULL if a NULL column\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_bool (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, M_bool * val)"
Retrieve a bool value from the resultset\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIval\fP Output boolean value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_int16 (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, M_int16 * val)"
Retrieve a signed 16bit Integer cell from the resultset\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIval\fP Output integer data\&. If NULL, outputs 0\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_int32 (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, M_int32 * val)"
Retrieve a signed 32bit Integer cell from the resultset\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIval\fP Output integer data\&. If NULL, outputs 0\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_int64 (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, M_int64 * val)"
Retrieve a signed 64bit Integer cell from the resultset\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIval\fP Output integer data\&. If NULL, outputs 0\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_binary (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, const M_uint8 ** bin, size_t * bin_size)"
Retrieve a binary cell from the resultset\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIbin\fP Output constant pointer to cell data\&. May be NULL if a NULL column\&. 
.br
\fIbin_size\fP Size of binary data returned\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "M_bool M_sql_stmt_result_isnull_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col)"
Retrieve if a cell is NULL, directly, ignoring errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on usage failure, or if NULL cell, otherwise M_FALSE 
.RE
.PP

.SS "const char* M_sql_stmt_result_text_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col)"
Retrieve a textual cell from the resultset, directly, ignoring errors\&.
.PP
All cell types may be retrieved in their textual form\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
String result on success, or NUL on failure\&. 
.RE
.PP

.SS "M_bool M_sql_stmt_result_bool_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col)"
Retrieve a bool value from the resultset, directly, ignoring errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return M_TRUE if data is a boolean value resulting in truth, or M_FALSE for all other cases 
.RE
.PP

.SS "M_int16 M_sql_stmt_result_int16_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col)"
Retrieve a signed 16bit Integer cell from the resultset, directly, ignoring errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return integer value represented in cell, or possibly 0 on error 
.RE
.PP

.SS "M_int32 M_sql_stmt_result_int32_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col)"
Retrieve a signed 32bit Integer cell from the resultset, directly, ignoring errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return integer value represented in cell, or possibly 0 on error 
.RE
.PP

.SS "M_int64 M_sql_stmt_result_int64_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col)"
Retrieve a signed 64bit Integer cell from the resultset, directly, ignoring errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return integer value represented in cell, or possibly 0 on error 
.RE
.PP

.SS "const M_uint8* M_sql_stmt_result_binary_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, size_t col, size_t * bin_size)"
Retrieve a binary cell from the resultset, directly, ignoring errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIbin_size\fP Size of binary data returned\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
NULL on error (not right data type), or error 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_isnull_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, M_bool * is_null)"
Retrieve if a cell is NULL (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column nameto retrieve 
.br
\fIis_null\fP Return whether column is NULL or not\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_text_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, const char ** text)"
Retrieve a textual cell from the resultset (by column name)\&.
.PP
All cell types may be retrieved in their textual form\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.br
\fItext\fP Output constant pointer to cell data\&. May be NULL if a NULL column\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_bool_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, M_bool * val)"
Retrieve a bool value from the resultset (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.br
\fIval\fP Output boolean value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_int16_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, M_int16 * val)"
Retrieve a signed 16bit Integer cell from the resultset (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.br
\fIval\fP Output integer data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_int32_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, M_int32 * val)"
Retrieve a signed 32bit Integer cell from the resultset (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.br
\fIval\fP Output integer data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_int64_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, M_int64 * val)"
Retrieve a signed 64bit Integer cell from the resultset (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.br
\fIval\fP Output integer data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_result_binary_byname (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, const M_uint8 ** bin, size_t * bin_size)"
Retrieve a binary cell from the resultset (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column index to retrieve 
.br
\fIbin\fP Output constant pointer to cell data\&. May be NULL if a NULL column\&. 
.br
\fIbin_size\fP Size of binary data returned, maximum is 64k\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of \fBM_sql_error_t\fP errors on failure\&. 
.RE
.PP

.SS "M_bool M_sql_stmt_result_isnull_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col)"
Retrieve if a cell is NULL, directly, ignoring errors (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on usage failure, or if NULL cell, otherwise M_FALSE 
.RE
.PP

.SS "const char* M_sql_stmt_result_text_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col)"
Retrieve a textual cell from the resultset, directly, ignoring errors (by column name)\&.
.PP
All cell types may be retrieved in their textual form\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
String result on success, or NUL on failure\&. 
.RE
.PP

.SS "M_bool M_sql_stmt_result_bool_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col)"
Retrieve a bool value from the resultset, directly, ignoring errors (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return M_TRUE if data is a boolean value resulting in truth, or M_FALSE for all other cases 
.RE
.PP

.SS "M_int16 M_sql_stmt_result_int16_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col)"
Retrieve a signed 16bit Integer cell from the resultset, directly, ignoring errors (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return integer value represented in cell, or possibly 0 on error 
.RE
.PP

.SS "M_int32 M_sql_stmt_result_int32_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col)"
Retrieve a signed 32bit Integer cell from the resultset, directly, ignoring errors (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return integer value represented in cell, or possibly 0 on error 
.RE
.PP

.SS "M_int64 M_sql_stmt_result_int64_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col)"
Retrieve a signed 64bit Integer cell from the resultset, directly, ignoring errors (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.RE
.PP
\fBReturns:\fP
.RS 4
Return integer value represented in cell, or possibly 0 on error 
.RE
.PP

.SS "const M_uint8* M_sql_stmt_result_binary_byname_direct (\fBM_sql_stmt_t\fP * stmt, size_t row, const char * col, size_t * bin_size)"
Retrieve a binary cell from the resultset, directly, ignoring errors (by column name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object\&. 
.br
\fIrow\fP Row index to retrieve 
.br
\fIcol\fP Column name to retrieve 
.br
\fIbin_size\fP Size of binary data returned\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
NULL on error (not right data type), or error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
