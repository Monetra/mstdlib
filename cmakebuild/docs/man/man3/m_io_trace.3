.TH "m_io_trace" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_io_trace
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBM_io_trace_type\fP \fBM_io_trace_type_t\fP"
.br
.ti -1c
.RI "typedef void(* \fBM_io_trace_cb_t\fP) (void *cb_arg, \fBM_io_trace_type_t\fP type, \fBM_event_type_t\fP event_type, const unsigned char *data, size_t data_len)"
.br
.ti -1c
.RI "typedef void *(* \fBM_io_trace_cb_dup_t\fP) (void *cb_arg)"
.br
.ti -1c
.RI "typedef void(* \fBM_io_trace_cb_free_t\fP) (void *cb_arg)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBM_io_trace_type\fP { \fBM_IO_TRACE_TYPE_READ\fP = 1, \fBM_IO_TRACE_TYPE_WRITE\fP = 2, \fBM_IO_TRACE_TYPE_EVENT\fP = 3 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBM_io_error_t\fP \fBM_io_add_trace\fP (\fBM_io_t\fP *io, size_t *layer_id, \fBM_io_trace_cb_t\fP callback, void *cb_arg, \fBM_io_trace_cb_dup_t\fP cb_dup, \fBM_io_trace_cb_free_t\fP cb_free)"
.br
.ti -1c
.RI "void * \fBM_io_trace_get_callback_arg\fP (\fBM_io_t\fP *io, size_t layer_id)"
.br
.ti -1c
.RI "M_bool \fBM_io_trace_set_callback_arg\fP (\fBM_io_t\fP *io, size_t layer_id, void *cb_arg)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Event and I/O tracing addon
.PP
Allows data to be traced as it flows through the trace layer\&. For example communication over serial with an external device could have a trace layer that logs read and write commands\&.
.PP
This can be very useful when combined with the M_log logging module\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBM_io_trace_type\fP \fBM_io_trace_type_t\fP"

.SS "typedef void(* M_io_trace_cb_t) (void *cb_arg, \fBM_io_trace_type_t\fP type, \fBM_event_type_t\fP event_type, const unsigned char *data, size_t data_len)"
Definition for a function callback that is called every time a traceable event is triggered by the event subsystem\&.
.PP
\fBParameters:\fP
.RS 4
\fIcb_arg\fP User-specified callback argument registered when the trace was added to the event handle\&. 
.br
\fItype\fP The type of type that has been triggered, see M_io_trace_type_t\&. 
.br
\fIevent_type\fP The type of event that has been triggered, see M_event_type_t\&. 
.br
\fIdata\fP Data that is passing though this trace layer\&. 
.br
\fIdata_len\fP Length of data\&. 
.RE
.PP

.SS "typedef void*(* M_io_trace_cb_dup_t) (void *cb_arg)"
Definition for a function that duplicates a callback argument\&.
.PP
An io that has an accept event such as net can have connection specific arguments\&. The trace layer will be duplicated from the server to the \fInew\fP io client connection\&. This allows the cb_arg to be duplicated as well\&.
.PP
\fBParameters:\fP
.RS 4
\fIcb_arg\fP Callback argument of the type provided to M_io_add_trace\&. 
.RE
.PP

.SS "typedef void(* M_io_trace_cb_free_t) (void *cb_arg)"
Definition for a function that destroys a user provided callback data associated with the trace\&.
.PP
\fBParameters:\fP
.RS 4
\fIcb_arg\fP Callback argument of the type provided to M_io_add_trace\&. 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBM_io_trace_type\fP"
Trace even type\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIM_IO_TRACE_TYPE_READ \fP\fP
.TP
\fB\fIM_IO_TRACE_TYPE_WRITE \fP\fP
.TP
\fB\fIM_IO_TRACE_TYPE_EVENT \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fBM_io_error_t\fP M_io_add_trace (\fBM_io_t\fP * io, size_t * layer_id, \fBM_io_trace_cb_t\fP callback, void * cb_arg, \fBM_io_trace_cb_dup_t\fP cb_dup, \fBM_io_trace_cb_free_t\fP cb_free)"
Add a trace layer
.PP
\fBParameters:\fP
.RS 4
\fIio\fP io object\&. 
.br
\fIlayer_id\fP Layer id this is added at\&. 
.br
\fIcallback\fP Function called when the trace is triggered\&. 
.br
\fIcb_arg\fP Argument passed to callback\&. 
.br
\fIcb_dup\fP Function to duplicate cb_arg if needed\&. Optional and can be NULL if not used\&. 
.br
\fIcb_free\fP Function to destroy cb_arg when the io object id destroyed\&. Optional and can be NULL if not used\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Result\&. 
.RE
.PP

.SS "void* M_io_trace_get_callback_arg (\fBM_io_t\fP * io, size_t layer_id)"
Get the callback arg for a trace layer\&.
.PP
\fBParameters:\fP
.RS 4
\fIio\fP io object\&. 
.br
\fIlayer_id\fP Layer id\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Argument on success or NULL on error\&. NULL is success if a cb_arg was not set\&. 
.RE
.PP

.SS "M_bool M_io_trace_set_callback_arg (\fBM_io_t\fP * io, size_t layer_id, void * cb_arg)"
Set the callback arg for the trace layer\&.
.PP
\fBParameters:\fP
.RS 4
\fIio\fP io object\&. 
.br
\fIlayer_id\fP Layer id\&. 
.br
\fIcb_arg\fP Argument passed to callback\&.
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, otherwise M_FALSE on error\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
