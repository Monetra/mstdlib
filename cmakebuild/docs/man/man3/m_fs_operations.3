.TH "m_fs_operations" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_fs_operations
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBM_fs_error_t\fP \fBM_fs_symlink\fP (const char *target, const char *link_name)"
.br
.ti -1c
.RI "\fBM_fs_error_t\fP \fBM_fs_move\fP (const char *path_old, const char *path_new, M_uint32 mode, M_fs_progress_cb_t cb, M_uint32 progress_flags)"
.br
.ti -1c
.RI "\fBM_fs_error_t\fP \fBM_fs_copy\fP (const char *path_old, const char *path_new, M_uint32 mode, M_fs_progress_cb_t cb, M_uint32 progress_flags)"
.br
.ti -1c
.RI "\fBM_fs_error_t\fP \fBM_fs_delete\fP (const char *path, M_bool remove_children, M_fs_progress_cb_t cb, M_uint32 progress_flags)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "\fBM_fs_error_t\fP M_fs_symlink (const char * target, const char * link_name)"
Create a soft link\&.
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The target to link\&. 
.br
\fIlink_name\fP The link to create\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Result\&. 
.RE
.PP

.SS "\fBM_fs_error_t\fP M_fs_move (const char * path_old, const char * path_new, M_uint32 mode, M_fs_progress_cb_t cb, M_uint32 progress_flags)"
Move a file or directory from one location to another\&.
.PP
If moving a file to an existing directory the file will be copied into the directory with the same name\&.
.PP
\fBParameters:\fP
.RS 4
\fIpath_old\fP The file to move\&. 
.br
\fIpath_new\fP The location the file should be moved to\&. 
.br
\fImode\fP M_fs_file_mode_t mode\&. Only supports OVERWRITE\&. If overwrite is set the move will overwrite the file if it exists\&. Without this set the move operation will fail if the file exists\&. 
.br
\fIcb\fP Progress callback that should be called\&. 
.br
\fIprogress_flags\fP M_fs_progress_flags_t flags to control what data should be set in the progress callback\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Result\&. 
.RE
.PP

.SS "\fBM_fs_error_t\fP M_fs_copy (const char * path_old, const char * path_new, M_uint32 mode, M_fs_progress_cb_t cb, M_uint32 progress_flags)"
Copy a file or directory to a new location\&.
.PP
If copying a file to an existing directory the file will be copied into the directory with the same name\&.
.PP
\fBParameters:\fP
.RS 4
\fIpath_old\fP The file to move\&. 
.br
\fIpath_new\fP The location the file should be copied to\&. 
.br
\fImode\fP M_fs_file_mode_t mode\&. Only supports OVERWRITE\&. If overwrite is set the move will overwrite the file if it exists\&. Without this set the move operation will fail if the file exists\&. 
.br
\fIcb\fP Progress callback that should be called\&. 
.br
\fIprogress_flags\fP M_fs_progress_flags_t flags to control what data should be set in the progress callback\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Result\&. 
.RE
.PP

.SS "\fBM_fs_error_t\fP M_fs_delete (const char * path, M_bool remove_children, M_fs_progress_cb_t cb, M_uint32 progress_flags)"
Delete a file or directory\&.
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP The file to delete\&. 
.br
\fIremove_children\fP Only applies to directories\&. If M_TRUE all contents of the directory will be removed in addition to the directory itself\&. If M_FALSE and the directory is not empty an error will be returned\&. 
.br
\fIcb\fP Progress callback function\&. Most useful when deleting a directory with children and remove_children is M_TRUE\&. Will be called after a delete action is completed (each child is deleted and the passed path itself is deleted)\&. 
.br
\fIprogress_flags\fP M_fs_progress_flags_t flags to control what data should be set in the progress callback\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Result\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
