.TH "m_sql_stmt_bind" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_sql_stmt_bind
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBM_sql_stmt_bind_clear\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "void \fBM_sql_stmt_bind_new_row\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_null\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_bool\fP (\fBM_sql_stmt_t\fP *stmt, M_bool val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_int16\fP (\fBM_sql_stmt_t\fP *stmt, M_int16 val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_int32\fP (\fBM_sql_stmt_t\fP *stmt, M_int32 val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_int64\fP (\fBM_sql_stmt_t\fP *stmt, M_int64 val)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_text_const\fP (\fBM_sql_stmt_t\fP *stmt, const char *text, size_t max_len)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_text_own\fP (\fBM_sql_stmt_t\fP *stmt, char *text, size_t max_len)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_text_dup\fP (\fBM_sql_stmt_t\fP *stmt, const char *text, size_t max_len)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_binary_const\fP (\fBM_sql_stmt_t\fP *stmt, const M_uint8 *bin, size_t bin_len)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_binary_own\fP (\fBM_sql_stmt_t\fP *stmt, M_uint8 *bin, size_t bin_len)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_stmt_bind_binary_dup\fP (\fBM_sql_stmt_t\fP *stmt, const M_uint8 *bin, size_t bin_len)"
.br
.in -1c
.SH "Detailed Description"
.PP 
SQL Statement Parameter Binding 
.SH "Function Documentation"
.PP 
.SS "void M_sql_stmt_bind_clear (\fBM_sql_stmt_t\fP * stmt)"
Clear bound parameters from a prepared statement object\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.RE
.PP

.SS "void M_sql_stmt_bind_new_row (\fBM_sql_stmt_t\fP * stmt)"
Increment to next row for statement binding\&.
.PP
Callers can bind multiple rows for insert statements to reduce server round trips during bulk data insertion\&. This function creates a new row and resets the current column index for binding a new row worth of columns\&.
.PP
All rows must contain the same number of columns consisting of the same data types (with the exception that NULL may be used) or it is considered a failure\&.
.PP
TODO: It may not be possible to determine which row caused a failure, such as a key conflict\&. Figure this out\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_null (\fBM_sql_stmt_t\fP * stmt)"
Bind NULL as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_bool (\fBM_sql_stmt_t\fP * stmt, M_bool val)"
Bind M_bool as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIval\fP Boolean value to bind\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_int16 (\fBM_sql_stmt_t\fP * stmt, M_int16 val)"
Bind M_int16 as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIval\fP 16bit signed integer value to bind\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_int32 (\fBM_sql_stmt_t\fP * stmt, M_int32 val)"
Bind M_int32 as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIval\fP 32bit signed integer value to bind\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_int64 (\fBM_sql_stmt_t\fP * stmt, M_int64 val)"
Bind M_int64 as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIval\fP 64bit signed integer value to bind\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_text_const (\fBM_sql_stmt_t\fP * stmt, const char * text, size_t max_len)"
Bind a const string/text as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fItext\fP Constant string, that is guaranteed to be available until the statement is executed, to bind to statement\&. 
.br
\fImax_len\fP Maximum length of text/string value to use, use 0 for no maximum\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_text_own (\fBM_sql_stmt_t\fP * stmt, char * text, size_t max_len)"
Bind string/text as next column to prepared statement handle that will be automatically freed upon statement destruction\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fItext\fP Pointer to text/string to bind to statement\&. Must not be free'd by caller as destruction of the prepared statement handle will automatically free the value\&. 
.br
\fImax_len\fP Maximum length of text/string value to use, use 0 for no maximum\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_text_dup (\fBM_sql_stmt_t\fP * stmt, const char * text, size_t max_len)"
Bind string/text as next column to prepared statement handle that will be duplicated internally as the caller cannot guarantee the pointer will survive after execution of this bind call\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fItext\fP Pointer to text/string that will be duplicated and bound to the statement handle\&. 
.br
\fImax_len\fP Maximum length of text/string value to use, use 0 for no maximum\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_binary_const (\fBM_sql_stmt_t\fP * stmt, const M_uint8 * bin, size_t bin_len)"
Bind a const binary buffer as next column to prepared statement handle
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIbin\fP Constant binary data, that is guaranteed to be available until the statement is executed, to bind to statement\&. 
.br
\fIbin_len\fP Length of binary value to use\&. Only values up to 64k are allowed\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_binary_own (\fBM_sql_stmt_t\fP * stmt, M_uint8 * bin, size_t bin_len)"
Bind binary buffer as next column to prepared statement handle that will be automatically freed upon statement destruction\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIbin\fP Pointer to binary data to bind to statement\&. Must not be free'd by caller as destruction of the prepared statement handle will automatically free the value\&. 
.br
\fIbin_len\fP Length of binary value to use\&. Only values up to 64k are allowed\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_stmt_bind_binary_dup (\fBM_sql_stmt_t\fP * stmt, const M_uint8 * bin, size_t bin_len)"
Bind binary data as next column to prepared statement handle that will be duplicated internally as the caller cannot guarantee the pointer will survive after execution of this bind call\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized \fBM_sql_stmt_t\fP object 
.br
\fIbin\fP Pointer to binary data that will be duplicated and bound to the statement handle\&. 
.br
\fIbin_len\fP Length of binary value to use\&. Only values up to 64k are allowed\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBM_SQL_ERROR_SUCCESS\fP on success, or one of the \fBM_sql_error_t\fP values on failure\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
