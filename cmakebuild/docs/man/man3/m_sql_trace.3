.TH "m_sql_trace" 3 "Tue Feb 20 2018" "Mstdlib-1.0.0" \" -*- nroff -*-
.ad l
.nh
.SH NAME
m_sql_trace
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct M_sql_trace_data \fBM_sql_trace_data_t\fP"
.br
.ti -1c
.RI "typedef void(* \fBM_sql_trace_cb_t\fP) (\fBM_sql_trace_t\fP event_type, const \fBM_sql_trace_data_t\fP *data, void *arg)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBM_sql_trace_t\fP { \fBM_SQL_TRACE_CONNECTING\fP = 1, \fBM_SQL_TRACE_CONNECTED\fP = 2, \fBM_SQL_TRACE_CONNECT_FAILED\fP = 3, \fBM_SQL_TRACE_DISCONNECTING\fP = 4, \fBM_SQL_TRACE_DISCONNECTED\fP = 5, \fBM_SQL_TRACE_BEGIN_START\fP = 6, \fBM_SQL_TRACE_BEGIN_FINISH\fP = 7, \fBM_SQL_TRACE_ROLLBACK_START\fP = 8, \fBM_SQL_TRACE_ROLLBACK_FINISH\fP = 9, \fBM_SQL_TRACE_COMMIT_START\fP = 10, \fBM_SQL_TRACE_COMMIT_FINISH\fP = 11, \fBM_SQL_TRACE_EXECUTE_START\fP = 12, \fBM_SQL_TRACE_EXECUTE_FINISH\fP = 13, \fBM_SQL_TRACE_FETCH_START\fP = 14, \fBM_SQL_TRACE_FETCH_FINISH\fP = 15, \fBM_SQL_TRACE_CONNFAIL\fP = 16, \fBM_SQL_TRACE_TRANFAIL\fP = 17, \fBM_SQL_TRACE_DRIVER_DEBUG\fP = 18, \fBM_SQL_TRACE_DRIVER_ERROR\fP = 19 }"
.br
.ti -1c
.RI "enum \fBM_sql_conn_type_t\fP { \fBM_SQL_CONN_TYPE_UNKNOWN\fP = 0, \fBM_SQL_CONN_TYPE_PRIMARY\fP = 1, \fBM_SQL_CONN_TYPE_READONLY\fP = 2 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "M_bool \fBM_sql_connpool_add_trace\fP (\fBM_sql_connpool_t\fP *pool, \fBM_sql_trace_cb_t\fP cb, void *cb_arg)"
.br
.ti -1c
.RI "void \fBM_sql_trace_ignore_tranfail\fP (\fBM_sql_stmt_t\fP *stmt)"
.br
.ti -1c
.RI "const char * \fBM_sql_trace_get_error_string\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "\fBM_sql_error_t\fP \fBM_sql_trace_get_error\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "M_uint64 \fBM_sql_trace_get_duration_ms\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "M_uint64 \fBM_sql_trace_get_total_duration_ms\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "\fBM_sql_conn_type_t\fP \fBM_sql_trace_get_conntype\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "size_t \fBM_sql_trace_get_conn_id\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "const char * \fBM_sql_trace_get_query_user\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "const char * \fBM_sql_trace_get_query_prepared\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "size_t \fBM_sql_trace_get_bind_cols\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "size_t \fBM_sql_trace_get_bind_rows\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "M_bool \fBM_sql_trace_get_has_result_rows\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "size_t \fBM_sql_trace_get_affected_rows\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.ti -1c
.RI "size_t \fBM_sql_trace_get_result_row_count\fP (const \fBM_sql_trace_data_t\fP *data)"
.br
.in -1c
.SH "Detailed Description"
.PP 
SQL Pool Tracing 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct M_sql_trace_data \fBM_sql_trace_data_t\fP"
Typedef for trace data 
.SS "typedef void(* M_sql_trace_cb_t) (\fBM_sql_trace_t\fP event_type, const \fBM_sql_trace_data_t\fP *data, void *arg)"
Callback prototype used for tracing SQL subsystem events\&.
.PP
\fBParameters:\fP
.RS 4
\fIevent_type\fP The event type 
.br
\fIdata\fP The metadata about the event, use the M_sql_trace_*() functions to get details\&. 
.br
\fIarg\fP User-supplied argument passed to the trace callback\&. 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBM_sql_trace_t\fP"
Event types for SQL pool tracing 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIM_SQL_TRACE_CONNECTING \fP\fP
Starting a new connection 
.TP
\fB\fIM_SQL_TRACE_CONNECTED \fP\fP
New connection was successfully started 
.TP
\fB\fIM_SQL_TRACE_CONNECT_FAILED \fP\fP
New connection failed 
.TP
\fB\fIM_SQL_TRACE_DISCONNECTING \fP\fP
Starting graceful disconnect from server (idle, etc) 
.TP
\fB\fIM_SQL_TRACE_DISCONNECTED \fP\fP
Graceful disconnect has completed 
.TP
\fB\fIM_SQL_TRACE_BEGIN_START \fP\fP
SQL Transaction Begin starting\&. This may internally also call \fBM_SQL_TRACE_EXECUTE_START\fP and \fBM_SQL_TRACE_EXECUTE_FINISH\fP depending on how the driver handles transactions\&. 
.TP
\fB\fIM_SQL_TRACE_BEGIN_FINISH \fP\fP
SQL Transaction Begin completed (possibly failed) 
.TP
\fB\fIM_SQL_TRACE_ROLLBACK_START \fP\fP
SQL Transaction Rollback starting\&. This may internally also call \fBM_SQL_TRACE_EXECUTE_START\fP and \fBM_SQL_TRACE_EXECUTE_FINISH\fP depending on how the driver handles transactions\&. 
.TP
\fB\fIM_SQL_TRACE_ROLLBACK_FINISH \fP\fP
SQL Transaction Rollback completed (possibly failed) 
.TP
\fB\fIM_SQL_TRACE_COMMIT_START \fP\fP
SQL Transaction Commit starting\&. This may internally also call \fBM_SQL_TRACE_EXECUTE_START\fP and \fBM_SQL_TRACE_EXECUTE_FINISH\fP depending on how the driver handles transactions\&. On failure, this may also flow through \fBM_SQL_TRACE_ROLLBACK_START\fP and \fBM_SQL_TRACE_ROLLBACK_FINISH\fP 
.TP
\fB\fIM_SQL_TRACE_COMMIT_FINISH \fP\fP
SQL Transaction Commit completed (possibly failed) 
.TP
\fB\fIM_SQL_TRACE_EXECUTE_START \fP\fP
SQL Statement Execution started 
.TP
\fB\fIM_SQL_TRACE_EXECUTE_FINISH \fP\fP
SQL Statement Execution finished (possibly failed) 
.TP
\fB\fIM_SQL_TRACE_FETCH_START \fP\fP
SQL Statement Fetching result data started 
.TP
\fB\fIM_SQL_TRACE_FETCH_FINISH \fP\fP
SQL Statement Fetching result data finished (possibly failed or canceled) 
.TP
\fB\fIM_SQL_TRACE_CONNFAIL \fP\fP
Connection to SQL server failed unexpectedly 
.TP
\fB\fIM_SQL_TRACE_TRANFAIL \fP\fP
SQL Transaction failed (duplicative of M_SQL_TRACE_EXECUTE_FINISH), but only on fatal (non-retryable) failure 
.TP
\fB\fIM_SQL_TRACE_DRIVER_DEBUG \fP\fP
Debug/Informational message generated by driver 
.TP
\fB\fIM_SQL_TRACE_DRIVER_ERROR \fP\fP
Error message generated by driver 
.SS "enum \fBM_sql_conn_type_t\fP"
Connection type 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIM_SQL_CONN_TYPE_UNKNOWN \fP\fP
Unknown, probably misuse 
.TP
\fB\fIM_SQL_CONN_TYPE_PRIMARY \fP\fP
Primary (read/write) sub-pool 
.TP
\fB\fIM_SQL_CONN_TYPE_READONLY \fP\fP
Read Only sub-pool 
.SH "Function Documentation"
.PP 
.SS "M_bool M_sql_connpool_add_trace (\fBM_sql_connpool_t\fP * pool, \fBM_sql_trace_cb_t\fP cb, void * cb_arg)"
Add a trace callback to the SQL subsystem\&.
.PP
Only one trace callback can be registered per pool\&. If one is already registered, it will be replaced\&.
.PP
\fBNote:\fP
.RS 4
This must be called prior to \fBM_sql_connpool_start()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Initialized pool object by \fBM_sql_connpool_create()\fP\&. 
.br
\fIcb\fP Callback to register 
.br
\fIcb_arg\fP User-supplied argument to pass to callback\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE on success, M_FALSE on misuse 
.RE
.PP

.SS "void M_sql_trace_ignore_tranfail (\fBM_sql_stmt_t\fP * stmt)"
Set a flag on the statement to ensure a \fBM_SQL_TRACE_TRANFAIL\fP is not triggered in the event of a failure\&.
.PP
This is used to silence warnings in the trace system for failures that may be expected\&. For instance, this is used internally by \fBM_sql_table_exists()\fP otherwise a warning might be emitted when the table does not exist\&.
.PP
\fBParameters:\fP
.RS 4
\fIstmt\fP Initialized statement handle to apply flag 
.RE
.PP

.SS "const char* M_sql_trace_get_error_string (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the error string containing the most recent error condition\&.
.PP
Only Valid on:
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNECT_FAILED\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_BEGIN_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_ROLLBACK_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_COMMIT_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNFAIL\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_DRIVER_DEBUG\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_DRIVER_ERROR\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to error string, or NULL if no error string available\&. 
.RE
.PP

.SS "\fBM_sql_error_t\fP M_sql_trace_get_error (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the most recent error condition identifier\&.
.PP
Only valid on:
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNECT_FAILED\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_BEGIN_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_ROLLBACK_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_COMMIT_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNFAIL\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Most recent error code, possibly \fBM_SQL_ERROR_SUCCESS\fP if no error\&. 
.RE
.PP

.SS "M_uint64 M_sql_trace_get_duration_ms (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the duration, in milliseconds of operation
.PP
Only valid on:
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNECTED\fP - Time to establish connection
.IP "\(bu" 2
\fBM_SQL_TRACE_DISCONNECTING\fP - Time connection was up before disconnect was attempted\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_DISCONNECTED\fP - Time connection took to disconnect (from start of disconnect)
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNECT_FAILED\fP - Time it took for connection to fail\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_BEGIN_FINISH\fP - Time it took to begin a transaction\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_ROLLBACK_FINISH\fP - Time it took to rollback\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_COMMIT_FINISH\fP - Time it took to commit a transaction\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP - Time it took to execute the transaction\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP - Time it took to retrieve the rows after execution\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_CONNFAIL\fP - Time connection was up before a failure was detected\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP - Time query execution took before failure was returned\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Time in milliseconds\&. 
.RE
.PP

.SS "M_uint64 M_sql_trace_get_total_duration_ms (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the total duration of a sequence of events, for a limited set of events\&.
.PP
Only valid on:
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP - Total time of query execution plus row fetch time\&.
.IP "\(bu" 2
\fBM_SQL_TRACE_DISCONNECTED\fP - Total time from connection establishment to disconnect end\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Time in milliseconds\&. 
.RE
.PP

.SS "\fBM_sql_conn_type_t\fP M_sql_trace_get_conntype (const \fBM_sql_trace_data_t\fP * data)"
Retreive type of connection (Primary vs ReadOnly)
.PP
Available on all
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Type of connection 
.RE
.PP

.SS "size_t M_sql_trace_get_conn_id (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the internal connection id, enumerated from 0 - max_conns for each primary and readonly member pool\&.
.PP
Available on all
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Identifier 
.RE
.PP

.SS "const char* M_sql_trace_get_query_user (const \fBM_sql_trace_data_t\fP * data)"
Retreive the user-supplied query being executed\&.
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
User-supplied query\&. 
.RE
.PP

.SS "const char* M_sql_trace_get_query_prepared (const \fBM_sql_trace_data_t\fP * data)"
Retrieve string for prepared query (rewritten by driver) that has been executed by the server\&.
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Rewritten user-supplied query\&. 
.RE
.PP

.SS "size_t M_sql_trace_get_bind_cols (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the number of request columns bound to the query
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of columns bound to the query by the caller\&. 
.RE
.PP

.SS "size_t M_sql_trace_get_bind_rows (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the number of request rows bound to the query
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_TRANFAIL\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of rows bound to the query by the caller\&. 
.RE
.PP

.SS "M_bool M_sql_trace_get_has_result_rows (const \fBM_sql_trace_data_t\fP * data)"
Retrieve whether or not the query potentially has result data\&.
.PP
If the query has result data, and this is a \fBM_SQL_TRACE_EXECUTE_FINISH\fP, then you know for sure \fBM_SQL_TRACE_FETCH_START\fP/\fBM_SQL_TRACE_FETCH_FINISH\fP will also be called later\&.
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_START\fP
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
M_TRUE if the query could have result data, M_FALSE otherwise\&. 
.RE
.PP

.SS "size_t M_sql_trace_get_affected_rows (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the number of rows affected by a query\&.
.PP
This mostly applies to INSERT/UPDATE/DELETE type queries\&.
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_EXECUTE_FINISH\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Count of affected rows\&. 
.RE
.PP

.SS "size_t M_sql_trace_get_result_row_count (const \fBM_sql_trace_data_t\fP * data)"
Retrieve the total number of rows fetched from the server\&.
.PP
Only available on:
.IP "\(bu" 2
\fBM_SQL_TRACE_FETCH_FINISH\fP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Trace Data structure passed to trace callback 
.RE
.PP
\fBReturns:\fP
.RS 4
Count of retrieved rows\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Mstdlib-1\&.0\&.0 from the source code\&.
