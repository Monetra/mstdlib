env:
  CIRRUS_CLONE_DEPTH: 1
  COVERITY_EMAIL: ENCRYPTED[b5c0701345dba2e40e6db6b16d3c6ecfdc1b4bc758e122b0d42931cad334bea4f13d3c3e91e776e04490420346bba757]
  COVERITY_SCAN_TOKEN: ENCRYPTED[c80d807eab99d4c4555d53725d89c69800312469e03c2c001dd3ae8c9b5b9db6464dd9da136f44676b461fe9e9d26f3a]

fetch_thirdparty: &fetch_thirdparty
  fetch_thirdparty_script:
    - mkdir -p thirdparty thirdparty/sqlite-amalgamation &&
      git clone --depth=1 https://github.com/c-ares/c-ares.git thirdparty/c-ares &&
      wget https://sqlite.org/2022/sqlite-amalgamation-3380500.zip -O thirdparty/sqlite-amalgamation.zip &&
      unzip -j thirdparty/sqlite-amalgamation.zip -d thirdparty/sqlite-amalgamation

cmake_build: &cmake_build
  cmake_build_script:
    - cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DMSTDLIB_BUILD_FOR_CI=TRUE -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -DPostgreSQL_DIR="$PostgreSQL_DIR" -G Ninja -H. -B_builds &&
      cmake --build _builds

cmake_test: &cmake_test
  env:
    LD_LIBRARY_PATH: "$CIRRUS_WORKING_DIR/_builds/lib:$LD_LIBRARY_PATH"
    CTEST_OUTPUT_ON_FAILURE: "1"
    CK_VERBOSITY: "verbose"
  cmake_test_script:
    - cd _builds/test && ctest -VV

#install_coverity: &install_coverity
#    env:
#      COV_ARC: "$CIRRUS_WORKING_DIR/cov-analysis-$COV_PLATFORM.tgz"
#      COV_DIR: "$CIRRUS_WORKING_DIR/coverity-scan-analysis"
#      PATH: "$PATH:$CIRRUS_WORKING_DIR/cov-analysis/bin"
#  only_if: $BUILD_TYPE == 'coverity'
#  install_coverity_script:
#    - test ! -d "${COV_DIR}" &&
#      mkdir -p "${COV_DIR}" &&
#      curl -s -S -F project="${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}"
#                 -F token="${COVERITY_SCAN_TOKEN}"
#                 -o "${COV_ARC}"
#                 "https://scan.coverity.com/download/cxx/${COV_PLATFORM}" &&
#      tar -xzf "${COV_ARC}" -C "${COV_DIR}"
#    - ln -s $(find "${COV_DIR}" -type d -name "cov-analysis*") cov-analysis

#submit_to_coverity_scan: &submit_to_coverity_scan
#  only_if: $BUILD_TYPE == 'coverity'
#  submit_to_coverity_scan_script:
#    - tar -czf analysis-results.tgz cov-int
#    - curl -s -S -F project="${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}"
#                 -F token="${COVERITY_SCAN_TOKEN}"
#                 -F file=@analysis-results.tgz
#                 -F version="$(git rev-parse --short HEAD)"
#                 -F description="Cirrus CI build"
#                 -F email="${COVERITY_EMAIL}"
#                 "https://scan.coverity.com/builds"

debian_template: &debian_template
  env:
    DIST: "DEBIAN"
    LC_ALL: "C"
    SCAN_BUILD: "scan-build"
    MAKE: "make"
    COV_COMPTYPE: gcc
    COV_PLATFORM: linux-x64
  osdeps_install_script:
    - apt-get update &&
      apt-get install -y cmake libssl-dev doxygen libpq-dev libmariadbd-dev unixodbc-dev libsqlite3-dev check ninja-build git wget unzip

debian_x64_template: &debian_x64_template
  << : *debian_template
  env:
    DIST: "DEBIAN"
    COV_PLATFORM: linux-x64

debian_arm64_template: &debian_arm64_template
  << : *debian_template
  env:
    DIST: "DEBIAN-ARM"
    COV_PLATFORM: linux-arm64

task:
  name: "Debian x64 - cmake"
  container:
    image: debian:latest
  << : *debian_x64_template
  << : *fetch_thirdparty
  << : *cmake_build
  << : *cmake_test

task:
  name: "Debian arm64 - cmake"
  arm_container:
    image: debian:latest
  << : *debian_arm64_template
  << : *fetch_thirdparty
  << : *cmake_build
  << : *cmake_test


