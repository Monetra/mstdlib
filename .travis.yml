language: c
dist: trusty
osx_image: xcode9
sudo: false

cache:
  apt: true

addons:
  coverity_scan:
    project:
      name: "Monetra/mstdlib"
      description: "M standard library for C"
    build_command_prepend: "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -H. -B_builds"
    build_command:   "cmake --build _builds"
    branch_pattern: coverity_scan
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - sourceline: 'ppa:adrozdoff/cmake' # newer cmake
      - llvm-toolchain-trusty-4.0
    packages:
      - cmake
      - libssl-dev
      - doxygen
      - libpq-dev
      - libmariadbd-dev
      - unixodbc-dev
      - check
      - clang-4.0

env:
  global:
    - secure: "m9Xq+CAgMokwdfVp9mWvT7+j8oyyWuL3vdmZOSGKVwTzdcAQn+KxGSYdqDUt2wwbJBAt0pblPLzqYG9TgPrqXRiTgOO7UImuOkS6gDD/UfegQqiPmWBDVfR0/Do3MQKChT9zaPSvklu5+50Bre8Wp9ZcSdgQFkrk5gGpEmMt4tVVQmIeFAE04bN1KBCwjWqBGSG56JM4+F3ENCgiOsuQl2b7zGXkFeFCEHzBEp2MpsCrtn5RqNIDQUGSX2OqMWVEQXWWqX8OUmHK3MvGHw0KbIv59SKE642t9j12lSjyndIaG4DyRCuJz1ZTki6bjZL+k0PK4bsGpC2wFAX/5NZY1qHL55bfKKKx17y7SQ3D6sheuIcM8dnF2AH3iu4tUxtPuhhn+NM0FLmxkbH3emkZHkOpwUE45IvAWNmp/bRkZYMqX65vm7oKLhbh4B2ZdsrHW9LKxGkp8Tk7gfzCK6H905MHVHnvW1xs+6kzDvWjUcx6p3QMuYdvdCqU/fSCjxyVntyiwGDGH4a6nBqmVs3ImpmB/MTSJhv6nwH+qUIEKIfBrKdjeZHyBRCACtynrTvHybhEjzfpdn0NhTCBiF1mqQP0xmJ1CFi7iVBrVvPWuP9ZyzZgKdE5yctKWPK+9oU4a43boXWYP/QLp6sIpthhjJF2M5jbJQDySAbwW/+BZ1w="

before_install:
  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-


jobs:
  include:
    - stage: normal builds
      os: linux
      env: 
        - BUILD_TYPE="cmake" OPENSSL_ROOT_DIR=""
      compiler: clang
    - os: linux
      env:
        - BUILD_TYPE="cmake" OPENSSL_ROOT_DIR=""
      compiler: gcc
    - os: linux
      env:
        - BUILD_TYPE="autotools" CONFIG_OPTS=""
      compiler: gcc
# OSX seems unreliable with travis, builds just get canceled.
#    - os: osx
#      env:
#        - BUILD_TYPE="cmake" OPENSSL_ROOT_DIR="/usr/local/opt/openssl"
#    - os: osx
#      env:
#        - BUILD_TYPE="autotools" CONFIG_OPTS="--with-ssl-dir=/usr/local/opt/openssl"
    - stage: Static Analysis
      os: linux
      env: 
        - BUILD_TYPE="analyze" OPENSSL_ROOT_DIR="" SCAN_BUILD="scan-build-4.0"
      compiler: clang
    - stage: Runtime Analysis
      os: linux
      env: 
        - BUILD_TYPE="asan" OPENSSL_ROOT_DIR=""
      compiler: clang
#    - os: osx
#      env:
#        - BUILD_TYPE="asan" OPENSSL_ROOT_DIR="/usr/local/opt/openssl"
#      compiler: clang
  allow_failures:
    - env: BUILD_TYPE="analyze" OPENSSL_ROOT_DIR="" SCAN_BUILD="scan-build-4.0"
    - env: BUILD_TYPE="asan" OPENSSL_ROOT_DIR=""
  fast_finish: true


install:
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install openssl doxygen mariadb-connector-c libiodbc libpq check; fi


# Put in 3rd party sources and chain build
before_script:
   - wget http://sqlite.org/2017/sqlite-amalgamation-3200100.zip
   - unzip sqlite-amalgamation-3200100.zip
   - mv sqlite-amalgamation-3200100 thirdparty/sqlite-amalgamation
   - git clone https://github.com/c-ares/c-ares.git thirdparty/c-ares --depth 1


script:
    - if [ "$BUILD_TYPE" = "cmake" ]     ; then cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -H. -B_builds ; fi
    - if [ "$BUILD_TYPE" = "cmake" ]     ; then cmake --build _builds && cmake --build _builds --target check ; fi
    - if [ "$BUILD_TYPE" = "asan" ]      ; then cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -DM_ASAN=TRUE -H. -B_builds ; fi
    - if [ "$BUILD_TYPE" = "asan" ]      ; then cmake --build _builds && cmake --build _builds --target check ; fi
    - if [ "$BUILD_TYPE" = "autotools" ] ; then ./buildconf.sh && mkdir build && cd build && ../configure ${CONFIG_OPTS} ; fi
    - if [ "$BUILD_TYPE" = "autotools" ] ; then make -j2 && LD_LIBRARY_PATH=`pwd`/sql/sqlite/.libs DYLD_LIBRARY_PATH=${LD_LIBRARY_PATH} make check ; fi
    - if [ "$BUILD_TYPE" = "analyze" ]   ; then ${SCAN_BUILD} cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -H. -B_builds ; fi
    - if [ "$BUILD_TYPE" = "analyze" ]   ; then travis_wait 30 ${SCAN_BUILD} cmake --build _builds && cmake --build _builds --target check ; fi
