language: c
dist: bionic
sudo: required

cache:
  apt: true

addons:
  apt:
    packages:
      - cmake
      - libssl-dev
      - doxygen
      - libpq-dev
      - libmariadbd-dev
# already installed
#      - clang-7
#      - clang-tools-7
      - unixodbc-dev
      - libsqlite3-dev
      - libc-ares-dev

# Add coverity certificate to system ca-certificates
before_install:
  - if [ "${COVERITY_SCAN_BRANCH}" = "1" ]; then echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-certificates.crt ; fi


# Deploy to GitHub pages
deploy:
  provider: script
  script: ./gh-pages-deploy.sh
  skip_cleanup: true
  on:
    branch: master
    condition: "$GHPAGES_DEPLOY = yes"


jobs:
  include:
    - stage: normal builds
      os: linux
      env:
        - BUILD_TYPE="cmake" OPENSSL_ROOT_DIR="" GHPAGES_DEPLOY="yes"
      compiler: clang
    - os: linux
      env:
        - BUILD_TYPE="cmake" OPENSSL_ROOT_DIR=""
      compiler: gcc
    - os: linux
      env:
        - BUILD_TYPE="autotools" CONFIG_OPTS=""
      compiler: gcc
# OSX is sometimes unreliable. Comment out if we start having issues.
    - os: osx
      osx_image: xcode11
      env:
        - BUILD_TYPE="cmake" OPENSSL_ROOT_DIR="/usr/local/opt/openssl" SQLite_DIR="/usr/local/opt/sqlite"
    - os: osx
      osx_image: xcode11
      env:
        - BUILD_TYPE="autotools" CONFIG_OPTS="--with-ssl-dir=/usr/local/opt/openssl --with-sqlite-dir=/usr/local/opt/sqlite --with-mysql-dir=/usr/local/opt/mariadb-connector-c"
    - stage: Static Analysis
      os: linux
      env:
        - BUILD_TYPE="analyze" OPENSSL_ROOT_DIR="" SCAN_BUILD="scan-build-7"
      compiler: clang
    - os: osx
      osx_image: xcode11
      env:
        - BUILD_TYPE="analyze" OPENSSL_ROOT_DIR="/usr/local/opt/openssl" SQLite_DIR="/usr/local/opt/sqlite" SCAN_BUILD="scan-build"
      compiler: clang
    - os: linux
      env:
        - BUILD_TYPE="coverity"
        - secure: "m9Xq+CAgMokwdfVp9mWvT7+j8oyyWuL3vdmZOSGKVwTzdcAQn+KxGSYdqDUt2wwbJBAt0pblPLzqYG9TgPrqXRiTgOO7UImuOkS6gDD/UfegQqiPmWBDVfR0/Do3MQKChT9zaPSvklu5+50Bre8Wp9ZcSdgQFkrk5gGpEmMt4tVVQmIeFAE04bN1KBCwjWqBGSG56JM4+F3ENCgiOsuQl2b7zGXkFeFCEHzBEp2MpsCrtn5RqNIDQUGSX2OqMWVEQXWWqX8OUmHK3MvGHw0KbIv59SKE642t9j12lSjyndIaG4DyRCuJz1ZTki6bjZL+k0PK4bsGpC2wFAX/5NZY1qHL55bfKKKx17y7SQ3D6sheuIcM8dnF2AH3iu4tUxtPuhhn+NM0FLmxkbH3emkZHkOpwUE45IvAWNmp/bRkZYMqX65vm7oKLhbh4B2ZdsrHW9LKxGkp8Tk7gfzCK6H905MHVHnvW1xs+6kzDvWjUcx6p3QMuYdvdCqU/fSCjxyVntyiwGDGH4a6nBqmVs3ImpmB/MTSJhv6nwH+qUIEKIfBrKdjeZHyBRCACtynrTvHybhEjzfpdn0NhTCBiF1mqQP0xmJ1CFi7iVBrVvPWuP9ZyzZgKdE5yctKWPK+9oU4a43boXWYP/QLp6sIpthhjJF2M5jbJQDySAbwW/+BZ1w="
      addons:
        coverity_scan:
          project:
            name: "Monetra/mstdlib"
            description: "M standard library for C"
          notification_email: brad@monetra.com
          build_command_prepend: "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -H. -B_builds"
          build_command: "cmake --build _builds"
          branch_pattern: coverity_scan
        apt:
          packages:
            - cmake
            - libssl-dev
            - doxygen
            - libpq-dev
            - libmariadbd-dev
            - unixodbc-dev
# Already installed
#            - clang-7
#            - clang-tools-7
            - libsqlite3-dev
            - libc-ares-dev
    - stage: Runtime Analysis
      os: linux
      env:
        - BUILD_TYPE="asan" OPENSSL_ROOT_DIR=""
      compiler: clang
    - os: osx
      osx_image: xcode11
      env:
        - BUILD_TYPE="asan" OPENSSL_ROOT_DIR="/usr/local/opt/openssl" SQLite_DIR="/usr/local/opt/sqlite"
      compiler: clang


install:
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      brew update --quite
      brew install openssl doxygen mariadb-connector-c libiodbc libpq check c-ares sqlite llvm
      brew link --force --overwrite llvm
      export PATH="/usr/local/opt/llvm/bin:$PATH"
      export CC="clang"
      export CXX="clang++"
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      # The libcheck in Ubuntu 18.04 can't be linked against, so we need to build our own.
      MYDIR=`pwd` && \
      cd /tmp && \
      wget https://github.com/libcheck/check/releases/download/0.12.0/check-0.12.0.tar.gz && \
      tar -zxvpf check-0.12.0.tar.gz && \
      cd check-0.12.0 && \
      ./configure --prefix=/usr/local && \
      make && \
      sudo make install && \
      cd "$MYDIR"
    fi

# Put in 3rd party sources and chain build
#before_script:
#   - |
#     git clone https://github.com/c-ares/c-ares.git thirdparty/c-ares --depth 1
#     wget http://sqlite.org/2017/sqlite-amalgamation-3200100.zip
#     unzip sqlite-amalgamation-3200100.zip
#     mv sqlite-amalgamation-3200100 thirdparty/sqlite-amalgamation

script:
    - |
      case "${BUILD_TYPE}" in
        cmake)
          cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DMSTDLIB_BUILD_FOR_CI=TRUE -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -DSQLite_DIR="$SQLite_DIR" -H. -B_builds
          cmake --build _builds
          cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build _builds --target check
          ;;
        asan)
          cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DMSTDLIB_BUILD_FOR_CI=TRUE -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -DSQLite_DIR="$SQLite_DIR" -DM_ASAN=TRUE -H. -B_builds
          cmake --build _builds
          cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build _builds --target check
          ;;
        autotools)
          ./buildconf.sh
          mkdir build
          pushd build
          ../configure ${CONFIG_OPTS}
          make -j2
          cp sql/sqlite/.libs/mstdlib_sql_sqlite.so sql/.libs/
          make check
          popd
          ;;
        analyze)
          ${SCAN_BUILD} cmake -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DMSTDLIB_BUILD_FOR_CI=TRUE -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" -DSQLite_DIR="$SQLite_DIR" -H. -B_builds
          travis_wait 30 ${SCAN_BUILD} cmake --build _builds
          cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build _builds --target check
          ;;
       esac
