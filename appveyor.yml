image: Visual Studio 2015

# Github/Bitbucket only: get source code for one particular commit as zip archive, instead of git clone'ing.
shallow_clone: true

# List of build configurations to test.
configuration:
  - RelWithDebInfo

# Note: You can set extra cmake args for a particular matrix entry with CMAKE_EXTRA_OPTIONS. For example:
#     CMAKE_EXTRA_OPTIONS: -DOPENSSL_ROOT_DIR=C:/OpenSSL-Win32
environment:
  matrix:
    # MSVC 2015, 32-bit x86
    - COMPILER: MSVC
      MSVC_SETUP_PATH: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat
      MSVC_SETUP_ARG: x86

    # MSVC 2015, 64-bit x86
    - COMPILER: MSVC
      MSVC_SETUP_PATH: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat
      MSVC_SETUP_ARG: x64

    # MinGW, 32-bit x86
    - COMPILER: MINGW
      PATH: C:\mingw-w64\i686-5.3.0-posix-dwarf-rt_v4-rev0\mingw32\bin;%PATH%
#      PATH: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin;%PATH%
#      PATH: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin;%PATH%

install:
  # Clone libcheck into projects dir (will be built before the main project).
  - cd C:\projects
  - git clone https://github.com/libcheck/check.git check --depth 1
  # -- note: libcheck annoyingly hardcodes the build type to debug, use powershell to comment this out --
  - cd check
  - ps: (Get-Content C:\projects\check\CMakeLists.txt).replace('set(CMAKE_BUILD_TYPE', '#set(CMAKE_BUILD_TYPE') | Set-Content C:\projects\check\CMakeLists.txt
  - cd %APPVEYOR_BUILD_FOLDER%
  # Clone C-ARES into thirdparty dir (will be chain-built).
  - git clone https://github.com/c-ares/c-ares.git thirdparty/c-ares --depth 1
  # Download SQLite amalgamation file, extract into thirdparty dir (will be chain built)
  - appveyor DownloadFile "http://sqlite.org/2017/sqlite-amalgamation-3200100.zip" -FileName sqlite_amal.zip
  - 7z x sqlite_amal.zip > nul
  - move sqlite-amalgamation-3200100 thirdparty/sqlite-amalgamation
  # Rename sh.exe as sh.exe in PATH interferes with MinGW.
  - rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe"
  # Download and extract ninja, add it to PATH.
  - mkdir C:\projects\ninja
  - cd C:\projects\ninja
  - appveyor DownloadFile "https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-win.zip" -FileName ninja.zip
  - 7z x ninja.zip > nul
  - set PATH=C:\projects\ninja;%PATH%
  - ninja --version

before_build:
  # Setup build environment for the selected compiler (not all compilers need to do anything here).
  #  -- Visual Studio --
  - if "%COMPILER%" == "MSVC" call "%MSVC_SETUP_PATH%" %MSVC_SETUP_ARG%

build_script:
  # Build libcheck.
  - mkdir C:\projects\build-check
  - cd C:\projects\build-check
  - cmake -GNinja
    -DCHECK_ENABLE_TESTS=FALSE
    -DCMAKE_BUILD_TYPE=%configuration%
    -DCMAKE_INSTALL_PREFIX=C:\projects\build-check\install
    C:\projects\check
  - ninja install
  # Build mstdlib.
  - mkdir C:\projects\build-mstdlib
  - cd C:\projects\build-mstdlib
  - cmake -GNinja
    -DCMAKE_BUILD_TYPE=%configuration%
    -DCMAKE_INSTALL_PREFIX=C:\projects\build-mstdlib\test_install
    -DCheck_DIR=C:\projects\build-check\install
    -DMSTDLIB_SKIP_SLOW_TESTS=TRUE
    %CMAKE_EXTRA_OPTIONS% %APPVEYOR_BUILD_FOLDER%
  - ninja install

test_script:
  # Add a firewall exception to allow test programs to communicate on port 1234
  - netsh advfirewall firewall add rule name="Test Script Inbound Port 1234" dir=in action=allow protocol=TCP localport=1234
  - cd C:\projects\build-mstdlib\test
  - set CTEST_OUTPUT_ON_FAILURE=1
  - ctest

# Enable RDP connections into build worker.
# Force build worker to stay open after build is done, so we can RDP into it.
#init:
#  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

